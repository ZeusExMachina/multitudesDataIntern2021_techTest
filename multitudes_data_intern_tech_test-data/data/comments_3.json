{"ggplot2": [{"comment_id": "MDEyOklzc3VlQ29tbWVudDg2Mzg4Mw==", "comment_author": "hadley", "comment_created_date": "2020-03-12T16:42:37Z", "comment_text": "Look's good.  I'll pull in when I get a chance"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQ1ODk4OTc=", "comment_author": "kohske", "comment_created_date": "2020-03-20T06:44:05Z", "comment_text": "Now the name of aes is family and it is bind to fontfamily of gpar (like colour in aes and col in gpar).\nThis is because theme_text uses family."}], "lubridate": [{"comment_id": "MDEyOklzc3VlQ29tbWVudDE0Mzk0OTU1", "comment_author": "ijlyttle", "comment_created_date": "2020-03-04T18:05:53Z", "comment_text": "I think I have found a way to incorporate the other ISO8601 formats into stamp()\nMy idea is to add to the orders in lubridate_formats, the ones that Vitalie added to the parser:\n  # adding ISO8601\n  out <- c(ymd_hmsz=\"ymdTz\", out)\nI will then modify stamp() to intercept formats that end in Ou, Oo, Oz, OO, and to format those accordingly.\nHopefully I will not have desecrated stamp() too much :)\nAs well, I will supply some unit tests.\nIn short, I will modify the files stamp.r and test-stamp.R.\nMy goal is to be complete by the end of this week, i.e. ymd_hms(\"2013-03-09 23:59:59\", tz=\"America/Chicago\").\nIan"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDE0NTY2NTg3", "comment_author": "ijlyttle", "comment_created_date": "2020-03-07T15:26:30Z", "comment_text": "Work on stamp() and unit tests complete.\nFiles: stamp.r test-stamp.R\nMade pull request to vitoshka. Commit: ca11fc7"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDE5MzE3OTU0NQ==", "comment_author": "vspinu", "comment_created_date": "2020-03-07T09:32:08Z", "comment_text": "Thanks!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDE5NTMxMzEyNA==", "comment_author": "vspinu", "comment_created_date": "2020-03-11T10:42:36Z", "comment_text": "As to the commiting style, could you please keep related changes in one commit whenever possible? No need to split out documentation, roxigenization and news addition steps. All of these are a single change - adding one feature.\nAlso could you please add a test case as per #355?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDIwMjQzMTg4Mg==", "comment_author": "vspinu", "comment_created_date": "2020-03-28T15:10:32Z", "comment_text": "Hi Imanuel. What is the status of this? Do you plan to address my other comments and add tests? I would like to release by the end of this week. I can merge what you have so far and amend those myself if you don't have time."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDIwMjU3OTcyNA==", "comment_author": "imanuelcostigan", "comment_created_date": "2020-03-28T21:02:34Z", "comment_text": "@vspinu I'm unlikely to get time before end of the week. In terms of commit style - sure. Suggest that you consider adding a CONTRIBUTING file to repo with this and other expectations."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDIwMzEyNjc2MQ==", "comment_author": "vspinu", "comment_created_date": "2020-03-29T21:51:15Z", "comment_text": "Ok. I will then merge manually your changes these days then leave for another shelve for 5-6 days before the final release. Will add the CONTRIBUTING file. Thanks for the idea."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDIwMzM0MDcwMg==", "comment_author": "imanuelcostigan", "comment_created_date": "2020-03-30T09:19:06Z", "comment_text": "@vspinu found myself with some time tonight. Have added test cases and default method as requested."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDIwMzU3NzQ0MA==", "comment_author": "vspinu", "comment_created_date": "2020-03-30T18:52:58Z", "comment_text": "There are merge conflicts. I am merging it right now. By \"default\" I meant to use useAsDefault argument to setGeneric, but I guess this doesn't make any difference.\nBTW, why do you need a method for \"character\"? as.Date does good job there. No?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDIwMzU4NzgyMg==", "comment_author": "imanuelcostigan", "comment_created_date": "2020-03-30T19:07:34Z", "comment_text": "as.Date fine in that respect, but why not give users the same function call for everything? Of course, there is a performance hit by wrapping as.Date in an S4 method call, but I think users will appreciate unified call semantics. If they want performance, they can always call as.Date directly."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDIwMzU4OTk2OQ==", "comment_author": "vspinu", "comment_created_date": "2020-03-30T19:12:40Z", "comment_text": "Performance is not an issue. We are defaulting to as.Date anyways. So character input will drop into as.Date.character which seem to be doing a bit more than format = \"%Y-%m-%d\"."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI4MzgyNTI2Mg==", "comment_author": "vspinu", "comment_created_date": "2020-03-03T00:16:04Z", "comment_text": "Thanks!\nWould you be so kind to add a line to the NEWS?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI4NDAxNDk3Ng==", "comment_author": "timgoodman", "comment_created_date": "2020-03-03T17:21:03Z", "comment_text": "@vspinu Updated NEWS.md, as requested. :)"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI4NDA4NDc5Mg==", "comment_author": "vspinu", "comment_created_date": "2020-03-03T22:13:18Z", "comment_text": "\ud83d\udc4d"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI4NTI5MDY1MA==", "comment_author": "vspinu", "comment_created_date": "2020-03-09T08:48:30Z", "comment_text": "Thanks!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI4NjA2NzI0MQ==", "comment_author": "vspinu", "comment_created_date": "2020-03-13T10:19:33Z", "comment_text": "Thanks!"}], "stringr": [{"comment_id": "MDEyOklzc3VlQ29tbWVudDQ0NzQ4MzM=", "comment_author": "hadley", "comment_created_date": "2020-03-13T14:53:24Z", "comment_text": "It's an autocorrect mistake by my fingers ;)  Thanks!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDE0ODUxOTQ2", "comment_author": "hadley", "comment_created_date": "2020-03-13T16:27:27Z", "comment_text": "I would prefer to fix it in str_locate_all so that the two stringr functions remain consistent.  Would you mind taking a look and seeing how hard that would be?  Thanks!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDE1MDI1OTg1", "comment_author": "galangjs", "comment_created_date": "2020-03-17T16:46:30Z", "comment_text": "I guess it depends on how consistently you want str_locate_all to behave. Somehow we have to catch when  pattern == \"\". If we do that within str_locate_all, then that function no longer behaves the same way as gregexpr. Maybe a better approach is to define a common helper function for str_split and str_split_fixed that's only invoked when pattern == \"\"?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDE1MDY1ODU3", "comment_author": "hadley", "comment_created_date": "2020-03-18T16:42:27Z", "comment_text": "Hmmm, I would prefer that stringr be internal consistent.  If that means it can't be perfectly consistent with the existing regular expression functions then so be it.\nOr maybe str_split should ignore split locations that are either at the first or the last position of the string?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDE1NDc3OTg4", "comment_author": "hadley", "comment_created_date": "2020-03-26T18:33:14Z", "comment_text": "What is the binary po/R-ko.mo file? Is it automatically generated by R?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDE1NjI3OTgx", "comment_author": "Unknown", "comment_created_date": "2020-03-29T03:56:29Z", "comment_text": "No, the binary po/R-ko.mo is generated by a gettext tool.  I forgot\nremoving this file since it is not needed in the package at all.\nOn Tue, 2013-03-26 at 11:33 -0700, hadley wickham wrote:\n\nWhat is the binary po/R-ko.mo file? Is it automatically generated by\nR?\n\u2014\nReply to this email directly or view it on GitHub."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDE1NjQzMDE5", "comment_author": "hadley", "comment_created_date": "2020-03-29T14:29:02Z", "comment_text": "Thanks!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDg3ODcyOTUz", "comment_author": "jcheng5", "comment_created_date": "2020-03-30T23:11:12Z", "comment_text": "You can see this warning when you do devtools::install_github."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDg4MDc4NzYz", "comment_author": "hadley", "comment_created_date": "2020-03-31T13:11:34Z", "comment_text": "Thanks!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI4NTM2NzM3MQ==", "comment_author": "duarteguilherme", "comment_created_date": "2020-03-09T14:34:02Z", "comment_text": "Sorry for that. I've just seen someone proposed the same solution \"%f%\" below.\nAnyway, I think this could me integrated to the function.\n%s+% from stringi is kind of verbose."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQ3MzczMDQ4OA==", "comment_author": "yutannihilation", "comment_created_date": "2020-03-18T00:15:31Z", "comment_text": "Travis fails with this error:\n\nthere is no package called 'plyr'\n\nIf you need to use plyr::rbind.fill(), you also need to add plyr package to Suggests."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQ3Mzg0NTYwNA==", "comment_author": "hadley", "comment_created_date": "2020-03-18T10:04:37Z", "comment_text": "Or better, eliminate (or don't run) the example that uses plyr to avoid taking another dependency (suggested dependencies aren't bad, but I don't think it's worth it for the sake of a single example)"}]}