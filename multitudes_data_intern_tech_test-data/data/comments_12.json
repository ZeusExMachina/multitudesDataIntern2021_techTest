{"ggplot2": [{"comment_id": "MDEyOklzc3VlQ29tbWVudDU5NTkxMw==", "comment_author": "kohske", "comment_created_date": "2020-12-08T02:20:16Z", "comment_text": "Another one commit\n# specifying the width and height of legend.key\n\nd <- data.frame(g=gl(4,5), x=rep(1:5, 4), y=runif(4*5))\np <- ggplot(d, aes(x, y, linetype=g, shape=g, colour=g)) + geom_line() + geom_point()\n\nps <- list()\np[[1]] <- p + opts(legend.key.width=unit(3,\"line\"))\np[[2]] <- p[[1]] + opts(legend.direction = \"horizontal\", legend.position = \"bottom\")"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDYwOTcyMw==", "comment_author": "kohske", "comment_created_date": "2020-12-14T02:28:20Z", "comment_text": "# specify font family of all text elements\n\n# default sans\nqplot(1:10, 1:10, label=letters[1:10], colour=1:10, geom=\"text\", main=\"sans family\") + \n  theme_grey(base_family=\"sans\")\n\n# default serif\nqplot(1:10, 1:10, label=letters[1:10], colour=1:10, geom=\"text\", main=\"serif family\") +\n  theme_grey(base_family=\"serif\")\n\n# default serif but xlab is sans\nqplot(1:10, 1:10, label=letters[1:10], colour=1:10, geom=\"text\", main=\"serif family\") +\n  theme_grey(base_family=\"serif\") +\n  xlab(\"here is sans\") + opts(axis.title.x=theme_text(family=\"sans\"))"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI5OTIyOTU=", "comment_author": "hadley", "comment_created_date": "2020-12-02T16:31:03Z", "comment_text": "If you update again, I promise to pull in this time!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMwNzIwODE=", "comment_author": "jiho", "comment_created_date": "2020-12-08T23:26:54Z", "comment_text": "It is now in feature request #285"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI5ODAyOTk=", "comment_author": "hadley", "comment_created_date": "2020-12-01T20:43:10Z", "comment_text": "Would you mind updating to the latest version of the develop branch? Then I'll pull in."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI5OTE5MzY=", "comment_author": "hadley", "comment_created_date": "2020-12-02T16:03:36Z", "comment_text": "Sorry, match to master branch now - develop has been retired."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMwODE4NzA=", "comment_author": "BrianDiggs", "comment_created_date": "2020-12-09T16:24:18Z", "comment_text": "Tried rebasing the commit and just messed things up more.  Closing this pull request and opening a new one."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMxMTYyNjA=", "comment_author": "wch", "comment_created_date": "2020-12-12T23:49:16Z", "comment_text": "I think this patch introduces warnings when there are no outliers.\nset.seed(111)\ndat <- data.frame(x=LETTERS[1:3], y=rnorm(30))\nggplot(dat, aes(x=x,y=y)) + geom_boxplot()\n#Warning in min(df$outliers[[1]]) :\n#  no non-missing arguments to min; returning Inf\n#Warning in max(df$outliers[[1]]) :\n#  no non-missing arguments to max; returning -Inf\nIt looks like it gives the warning when it takes min() of an empty vector."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMxMTczMTA=", "comment_author": "kohske", "comment_created_date": "2020-12-13T01:21:08Z", "comment_text": "@wch thanks. I'll fix it soon."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMwOTczODc=", "comment_author": "hadley", "comment_created_date": "2020-12-11T14:19:22Z", "comment_text": "Could you please also add a note to NEWS about what they do?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMwOTc2MTc=", "comment_author": "kohske", "comment_created_date": "2020-12-11T15:12:22Z", "comment_text": "Ok. I accidentally work with this branch on local repository, so I will re-send a pull request."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMwOTc2OTY=", "comment_author": "hadley", "comment_created_date": "2020-12-11T15:29:22Z", "comment_text": "I also notice you have default_aes <- function(.) aes(fill = ..value..).  Does this cause problems if you use geoms other than rect?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMwOTc3MTU=", "comment_author": "kohske", "comment_created_date": "2020-12-11T15:33:21Z", "comment_text": "hmm, this is same as stat-bin2d, default_aes <- function(.) aes(fill = ..count..).\nWith regards to this problem, is there any difference between bin2d and summary2d?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMwOTc3MjY=", "comment_author": "kohske", "comment_created_date": "2020-12-11T15:36:09Z", "comment_text": "But I need to write test codes. So could you please leave this pull request for a while?\nI will test."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMwOTc3MzU=", "comment_author": "hadley", "comment_created_date": "2020-12-11T15:37:20Z", "comment_text": "Oh good point - I was thinking in terms of stat_summary where it has different summary functions for different outputs (but I don't think that's a better approach)."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMwOTc3ODU=", "comment_author": "kohske", "comment_created_date": "2020-12-11T15:46:56Z", "comment_text": "Then, do you think the function name stat-summary-2d is confusing? Please let me know if you come up with a good alternative for the naming."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMxMDY3MjI=", "comment_author": "kohske", "comment_created_date": "2020-12-12T14:50:11Z", "comment_text": "Now I think this feature can be merged, but should I write documents...?\nhere is test codes\n\nset.seed(1)\n\n# sample data\ndf <- data.frame(a = rnorm(1000), b = rnorm(1000))\ndf <- transform(df, v = exp(-(sqrt(a^2+b^2))) + rnorm(1000))\ndf[sample(1:1000, 50),]$v <- NA\n\n# z is passed to the summary function\nd <- ggplot(df, aes(x = a, y = b, z = v)) \n\n# by default, mean of z\nd + stat_summary2d()\n\n# you can use any summary function\nd + stat_summary2d(fun = function(x) sum(x^2))\n\n# var(x) is NA if length(x)==1\nd + stat_summary2d(drop = TRUE, fun = var)\nd + stat_summary2d(drop = FALSE, fun = var)\n\n# same for hex\nd + stat_summary_hex()\nd + stat_summary_hex(fun = function(x) sum(x^2))\nd + stat_summary_hex(drop = TRUE, fun = var)\nd + stat_summary_hex(drop = FALSE, fun = var)"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMDMxMDU=", "comment_author": "hadley", "comment_created_date": "2020-12-19T13:33:10Z", "comment_text": "Yes, some basic documentation would be great please."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyNDE0MDM=", "comment_author": "hadley", "comment_created_date": "2020-12-21T23:35:36Z", "comment_text": "Could you please rebase off master (I think it's just a conflict with NEWS) and I'll pull in."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyNDIyMDk=", "comment_author": "kohske", "comment_created_date": "2020-12-22T01:09:59Z", "comment_text": "Done. Now this branch is fast-forwardable for master."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMDMwMjA=", "comment_author": "hadley", "comment_created_date": "2020-12-19T13:23:47Z", "comment_text": "Looks good, apart from the few changes I noted above.  Can you please also add notch parameter and documentation to stat_boxplot?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMDU3NTc=", "comment_author": "wch", "comment_created_date": "2020-12-19T16:48:16Z", "comment_text": "OK, I made the changes to the code, and added documentation to geom_boxplot and stat_boxplot. I didn't commit the resulting changes to the .Rd files after running roxygenize, though. Running roxygenize appears to also change the NAMESPACE file, so I figured I'd just not mess with it. In general, what should I do with roxygen?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMTI1ODA=", "comment_author": "hadley", "comment_created_date": "2020-12-20T01:05:47Z", "comment_text": "Roxygen should be idempotent - if not, then that's a roxygen bug (so send me an email about it)"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMTkwMjU=", "comment_author": "hadley", "comment_created_date": "2020-12-20T13:58:06Z", "comment_text": "Two last changes and I think it's ready - a bullet point in NEWS, and a reference to a paper that describes how notched boxplots work."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMjU1Nzg=", "comment_author": "wch", "comment_created_date": "2020-12-20T21:22:49Z", "comment_text": "OK, I added the NEWS item, a description of how they work, and a reference to a paper. I also added the description of the hinge/quartile calculation for #108."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMjU2ODA=", "comment_author": "hadley", "comment_created_date": "2020-12-20T21:30:40Z", "comment_text": "Perfect - thanks!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMxMDIxNDY=", "comment_author": "wch", "comment_created_date": "2020-12-12T05:04:10Z", "comment_text": "I've had a few thoughts about the parameters. These probably should be dealt with before merging.\n\nI think I need a better name for the fullwidth parameter. Presently, setting it to FALSE (the default) scales each violin so the max width is the same. Setting it to TRUE scales each violin to have the same area (well, same area if tails were included). I also want an option to scale the area proportional to the sample size.\nShould there be an option to automatically draw the box plot and median dot, or should I make people do that manually? Doing it automatically may be difficult because the data goes through StatYdensity before it gets to GeomViolin. By the time it gets to the geom, the original data may no longer be accessible, so it can't be sent to GeomBoxplot."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMxMjkyNTQ=", "comment_author": "BrianDiggs", "comment_created_date": "2020-12-13T20:39:25Z", "comment_text": "@wch regarding your second point (option to automatically draw box plot), I would say no.  Adding a box plot is but one way to supplement the violin plot and it makes more sense with it being a separate layer.  With the aesthetics set up right in the initial ggplot call, it should be as simple as + geom_violin() + geom_boxplot() to get both of them."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMxMzE2NjY=", "comment_author": "wch", "comment_created_date": "2020-12-13T22:17:38Z", "comment_text": "@BrianDiggs Thanks, now that I've sat on it for a bit, I'm inclined to agree."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMxMzI2OTQ=", "comment_author": "wch", "comment_created_date": "2020-12-13T23:32:06Z", "comment_text": "Regarding the first point above, I've changed the fullwidth parameter to scalearea. When set to FALSE (default), it scales so the max width of each violin is the same. When set to TRUE, it scales so that area of each violin is the same.\nI've also added an option scalecount to scale by sample size. This will work with either value of scalearea."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMxMzMwMjg=", "comment_author": "BrianDiggs", "comment_created_date": "2020-12-13T23:59:53Z", "comment_text": "Let me see if I understand the possible interactions of these two:\n\nscalecount=FALSE and scalearea=FALSE: the widest part of the violin plot is the same width for all violins\nscalecount=FALSE and scalearea=TRUE: the area of each violin plot is the same for all violins\nscalecount=TRUE and scalearea=FALSE: the ratios of the widest parts of each violin are equal to the ratios of their respective sample sizes\nscalecount=TRUE and scalearea=TRUE: the ratios of the areas of each violin are equal to the ratios of their respective sample sizes\n\nIs that right?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMxMzMxMzU=", "comment_author": "wch", "comment_created_date": "2020-12-14T00:08:28Z", "comment_text": "@BrianDiggs yup, that's exactly right. I added some examples on the wiki page to illustrate: https://github.com/wch/ggplot2/wiki/geom_violin"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMxMzM1NzE=", "comment_author": "BrianDiggs", "comment_created_date": "2020-12-14T00:44:44Z", "comment_text": "So one controls what aspect of the violin is being scaled and the other controls by what that element is being scaled. I like the options that gives, but I'm not sure if I like the way the options are named/mapped.\nscalearea controls the aspect or element that is scaled. Rather than thinking of the parameter as \"Should I scale based on the area? Yes/No\" where no falls back on scaling by width, why not have an option \"scaledelement\" or \"elementscaled\" or \"aspectscaled\" which can have values \"width\" or \"area\". The default can be width, just as the default of \"scaledarea\" is FALSE. You could either throw a warning, an error, or silently use \"width\" if the value is unrecognized. The advantage of this is that it is more clear that you are picking from two different options regarding the scaling element, not just turning on a feature. Also, if there is anything else to scale by (not that I can think of any other aspects that are available), you just expand the allowable choices rather than have to add another flag variable.\nI'm less sure about changing the \"scalecount\" variable likewise (into, say, \"scaleby\" with choices \"count\" or \"equal\"). In one sense, there may be other things to scale by (though again I can't think of what).  It'd be nice to be able to make that an aesthetic, but that doesn't work because it is a group level aesthetic not a individual value one.\nOn Dec 13, 2011, at 4:08 PM, \"Winston\" reply@reply.github.com wrote:\n\n@BrianDiggs yup, that's exactly right. I added some examples on the wiki page to illustrate: https://github.com/wch/ggplot2/wiki/geom_violin\n\nReply to this email directly or view it on GitHub:\n#293 (comment)"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMxMzQyMjA=", "comment_author": "wch", "comment_created_date": "2020-12-14T01:57:29Z", "comment_text": "@BrianDiggs These are good suggestions... I didn't really like that the variables had very similar names but did different things."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMxMzUxODg=", "comment_author": "wch", "comment_created_date": "2020-12-14T04:23:39Z", "comment_text": "OK, how about:\n\nscaledaspect = \"width\" or \"area\"\nscaleby = \"equal\" or \"count\"\n\nFor some reason I'm finding it really hard to come up with good names for this."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMxNDU5MjE=", "comment_author": "BrianDiggs", "comment_created_date": "2020-12-14T18:35:49Z", "comment_text": "I like those better, but I agree that settling on a name is hard.  Better to have the struggle now, though, rather than after it gets released.\nOne point I keep going back and forth on is whether the choice for scaleby should be \"equal\" or \"none\" (or maybe \"nothing\").  I like when options, at least approximately, parse as language.  So for scaledaspect this works: scaledaspect=\"width\" can be read as \"the scaled aspect is the width\".  It is a bit trickier for scaleby: scaleby=\"count\" becomes \"What it [the scaled aspect] is scaled by is the count\".  For \"equal\" it parses more like \"It [the scaled aspect] is scaled such that they are all equal\"; for \"nothing\" a more parallel construct is possible \"What it [the scaled aspect] is scaled by is nothing.\"  This is not a very strong argument, though.\nI'd love to hear others' thoughts/ideas."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMxNzE5MTU=", "comment_author": "wch", "comment_created_date": "2020-12-16T01:13:31Z", "comment_text": "Here's another idea: scaledaspect and scalefactor. Thoughts?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMDMwNDQ=", "comment_author": "hadley", "comment_created_date": "2020-12-19T13:26:30Z", "comment_text": "I'm not sure I see why you need so many options - to me, the only sensible scalings are area constant, or area proportional to sample size."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMDQ5NjA=", "comment_author": "wch", "comment_created_date": "2020-12-19T15:58:29Z", "comment_text": "@hadley\n\nI'm not sure I see why you need so many options - to me, the only sensible scalings are area constant, or area proportional to sample size.\n\nI'm inclined to agree that scaling the max width isn't all that useful -- but for whatever reason that does seem to be the standard convention with violin plots. That's why width scaling is in there, and the default. If you're sure, I'm happy to take it out and have only scaling by area."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMDczNTk=", "comment_author": "wch", "comment_created_date": "2020-12-19T18:34:19Z", "comment_text": "OK, I made most of the changes and pushed them. The only things that remain are choosing the scale parameters and documenting them. @hadley, I'll make the changes once you let me know if you're sure that you don't want width scaling at all."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMTI1Njg=", "comment_author": "hadley", "comment_created_date": "2020-12-20T01:04:55Z", "comment_text": "Unless you strongly object, I'd suggest getting rid of width scaling."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMTM0MjM=", "comment_author": "wch", "comment_created_date": "2020-12-20T02:43:24Z", "comment_text": "I removed the width scaling option. Now there's just scalefactor which can be equal or count. I also added docs, and changed pos_dodge to use the method you mentioned. I didn't run roxygenize because of the NAMESPACE issue."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMTM0NzQ=", "comment_author": "hadley", "comment_created_date": "2020-12-20T02:50:00Z", "comment_text": "How about scale = \"fixed\" or \"free\"?  Would be nice parallel to facets"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMTQyMDA=", "comment_author": "BrianDiggs", "comment_created_date": "2020-12-20T04:14:28Z", "comment_text": "\"fixed\" and \"free\" are not a natural parallel, though.  From that, I'm not sure which is which.  I'm guessing \"fixed\" would be equal (fixed to the same size, as the facets are fixed to the same scale), and \"free\" would be scaled to the count (free to expand to the data's size), but I could probably come up with just as good explanation for the other way around.  I think it is better to go with more descriptive options (\"equal\" and \"count\"), though calling the parameter just scale seems reasonable."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMTQ3NzA=", "comment_author": "wch", "comment_created_date": "2020-12-20T05:32:41Z", "comment_text": "I have to agree with @BrianDiggs's assessment of fixed and free. It's not obvious which one would mean \"scale areas to be equal\" and which would mean \"scale area by counts\". scale does sound reasonable for a parameter name, though."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMTg5MTQ=", "comment_author": "hadley", "comment_created_date": "2020-12-20T13:45:20Z", "comment_text": "Agreed - I like scale, count and equal."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMjM3Mzk=", "comment_author": "wch", "comment_created_date": "2020-12-20T19:20:53Z", "comment_text": "OK, changed it to scale, count, and equal."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMjkxMjk=", "comment_author": "hadley", "comment_created_date": "2020-12-21T03:39:42Z", "comment_text": "Could you please also add a note to NEWS and then we'll be ready to go."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMzA3ODI=", "comment_author": "wch", "comment_created_date": "2020-12-21T07:57:34Z", "comment_text": "OK, I added a NEWS item and some visual tests. A heads up: I just tried merging, and it looks like there will be a small conflict in NEWS."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMzQwNjQ=", "comment_author": "hadley", "comment_created_date": "2020-12-21T14:13:01Z", "comment_text": "Do you mind rebasing your branch against master?  I think it's slightly easier to do from your end."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMzY2MDQ=", "comment_author": "wch", "comment_created_date": "2020-12-21T17:21:50Z", "comment_text": "OK, it should be good to go."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMDI5OTQ=", "comment_author": "hadley", "comment_created_date": "2020-12-19T13:21:05Z", "comment_text": "Thanks - in general, I want to eliminate all use of with, subset, transform etc in ggplot2 code."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMTM1NTE=", "comment_author": "hadley", "comment_created_date": "2020-12-20T02:59:36Z", "comment_text": "A few test cases would make me feel much more comfortable..."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMTM5NzM=", "comment_author": "wch", "comment_created_date": "2020-12-20T03:34:34Z", "comment_text": "@hadley I have a battery of visual tests for this, and for violin plots. Should I add them?\nAlso, what do you think about adding a title to each visual test describing what it's testing and what it should look like? I think that would be helpful."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMTg5NDE=", "comment_author": "hadley", "comment_created_date": "2020-12-20T13:48:06Z", "comment_text": "Visual tests are helpful, but I'd really prefer some automated ones, especially for the dodging.  That makes it much less likely I'll accidentally break them if I need to modify the code."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyNDE0OTA=", "comment_author": "hadley", "comment_created_date": "2020-12-21T23:45:49Z", "comment_text": "I also wonder why the fill is lost in this case:\nggplot(dat, aes(x, fill=g, group= 1)) +\n  geom_dotplot(binwidth=.4, alpha=.4, binpositions=\"all\", position=\"stack\")\n(adapted from the \"Multiple groups with aligned bins,\\n stacked (currently doesn't work)\" example in the visual tests)"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyNDE1MDI=", "comment_author": "hadley", "comment_created_date": "2020-12-21T23:48:18Z", "comment_text": "I like the idea of using titles on the visual tests - eventually the visual tests will be run automatically (so we can use git to compare the output), and the filenames could be generated by hashing their titles."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyNDIyMjE=", "comment_author": "wch", "comment_created_date": "2020-12-22T01:12:19Z", "comment_text": "Regarding titles on visual tests, how about a wrapper function similar to testthat? Instead of opts(title=\"mytitle\"), it could be something like visualtest(\"mytitle\",  { ggplot() + ... } ). Also, it would be nice if the wrapper did line breaks in the titles automatically."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyNDIzNjU=", "comment_author": "hadley", "comment_created_date": "2020-12-22T01:34:19Z", "comment_text": "Maybe a combination of the two - it might be easier to supply the path where the image should be saved so you can more easily locate the corresponding code. Ideally, the visual testing infrastructure would also create an html page for previewing all images in one test."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyNDI0NjM=", "comment_author": "wch", "comment_created_date": "2020-12-22T01:47:43Z", "comment_text": "If it's an html page, I guess you wouldn't need to put the titles in the graphs themselves; they could go in the web page. Another possibly useful feature would be to have two columns of images: one column with old images (from the last test run) and another with new images. That way it would be easy to inspect for important changes, even when there's a small change that alters the image files, but in a visually trivial way, like a change in border spacing, gridline width, antialiasing, and so on.\nIt might also be useful to have another column that indicates whether the image has changed byte-for-byte."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyNDI1MDY=", "comment_author": "kohske", "comment_created_date": "2020-12-22T01:54:23Z", "comment_text": "Do you know this one?\nhttps://github.com/cameronmcefee/Image-Diff-View-Modes\ngithub has diff-for-picture mode. I know it just now.\nSo a diff commits looks like this: cameronmcefee/Image-Diff-View-Modes@8e95f70\ncool."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyNDI1NzI=", "comment_author": "wch", "comment_created_date": "2020-12-22T02:04:33Z", "comment_text": "@hadley\n\nI also wonder why the fill is lost in this case\n\nI think it gets lost at the stat-ing stage. It also happens for regular histograms:\nset.seed(112)\ndat <- data.frame(x=rnorm(20), g=LETTERS[1:2])\n\n# Colors\nggplot(dat, aes(x, fill=g)) + geom_histogram(binwidth=.4)\n\n# Colors gone\nggplot(dat, aes(x, fill=g, group=1)) + geom_histogram(binwidth=.4)\nI just tested in 0.8.9, and it happens there too."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyNTM0OTE=", "comment_author": "wch", "comment_created_date": "2020-12-22T19:10:36Z", "comment_text": "@kohske that is very cool. It seems a little slow, though. And does it need to be viewed through github? I wonder how hard it would be to generate a static webpage with three columns of pictures: Old, New, and Difference."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyNjEyNTQ=", "comment_author": "hadley", "comment_created_date": "2020-12-23T14:20:58Z", "comment_text": "Ah ok, so for dotplot groups work like geom_histogram, rather than like geom_point.  That makes sense now that I think about it.\nAnd please see #319 for discussion of a better visual testing framework."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMTU1MjA=", "comment_author": "wch", "comment_created_date": "2020-12-20T07:19:31Z", "comment_text": "The problem was that sometimes the hinges are at interpolated values, but the calculation for whiskers -- after removing outliers -- used only actual data values. I changed it to get the range of the data and hinges."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMzMTUzMjQ=", "comment_author": "hadley", "comment_created_date": "2020-12-30T17:43:11Z", "comment_text": "What's the best way to fix this problem in general?  Add a z column to gtable and order by that prior to drawing?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMzYyNDM=", "comment_author": "kohske", "comment_created_date": "2020-12-21T16:55:58Z", "comment_text": "I had merged this fix/scales branch into fix/guides branch. These two are so closely related."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMjIyOTg=", "comment_author": "hadley", "comment_created_date": "2020-12-20T17:40:33Z", "comment_text": "Can we not do this more directly by manipulating the gtable object?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMjI0Mzk=", "comment_author": "kohske", "comment_created_date": "2020-12-20T17:52:00Z", "comment_text": "Possible and not difficult (actually my initial idea) but isn't it time consuming?\nIt requires to build all geoms twice -- one for panel and one for gudies.\nAnother approach is like \"removing guides from gtable.\"\nIn this case, no need to buide twice. But maybe somewhat indirect."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMjI0ODA=", "comment_author": "hadley", "comment_created_date": "2020-12-20T17:55:11Z", "comment_text": "I don't care about performance ;)  I'd rather make something simple and then make ggplot2 fast enough that it doesn't matter too much.  But using gtable should (eventually) have other advantages like being able to make the legend a fixed size."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMjI1MTA=", "comment_author": "kohske", "comment_created_date": "2020-12-20T17:57:52Z", "comment_text": "OK. Then I will rewrite it."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMjI2OTE=", "comment_author": "kohske", "comment_created_date": "2020-12-20T18:10:17Z", "comment_text": "Will you implement some remove grob interface for gtable?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyMjQ5Mjg=", "comment_author": "hadley", "comment_created_date": "2020-12-20T20:40:34Z", "comment_text": "Yes, I can.  That would be a better way to implement this code (and would handle null results etc).  Could you please open a request?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyNjI5NDE=", "comment_author": "hadley", "comment_created_date": "2020-12-23T17:38:37Z", "comment_text": "Looks good - also needs documentation updates to describe what free_x and free_y do."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyNjM2NjY=", "comment_author": "wligtenberg", "comment_created_date": "2020-12-23T18:58:43Z", "comment_text": "The documentation actually already included this. I just checked again to be sure, therefore, no updates to the documentation."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyNjM3MDY=", "comment_author": "hadley", "comment_created_date": "2020-12-23T19:02:49Z", "comment_text": "Looks good - the last thing to do is to update your checkout and then rebase this branch so I can cleanly include it. Please email ggplot-dev if you need help with that."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyNjU3NDg=", "comment_author": "wch", "comment_created_date": "2020-12-24T00:11:31Z", "comment_text": "Hang on before merging... I'm going to add a NEWS item also."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMyNjU5Njc=", "comment_author": "wch", "comment_created_date": "2020-12-24T01:07:26Z", "comment_text": "I had to rebase because of a merge conflict, but it should be good now."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMzMDA5ODU=", "comment_author": "hadley", "comment_created_date": "2020-12-29T14:22:45Z", "comment_text": "Thanks Dennis.  I didn't end up using the pull request directly, but your changes were very helpful and have now been incorporated.  Thanks!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMzMjE1MDU=", "comment_author": "hadley", "comment_created_date": "2020-12-31T15:24:47Z", "comment_text": "Closing since the new pulls are better :)"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMzMTkzODQ=", "comment_author": "baptiste", "comment_created_date": "2020-12-31T03:24:15Z", "comment_text": "Also, sorry for the unhelpful commit messages... will try and improve on this!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMzMjMwNzI=", "comment_author": "baptiste", "comment_created_date": "2020-12-31T22:11:33Z", "comment_text": "I think I fixed all the above in the new pull request."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMzMjEzNTk=", "comment_author": "hadley", "comment_created_date": "2020-12-31T14:52:31Z", "comment_text": "Looks like this got included in #340, so I'm going to close it for now."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMzMjEzNDk=", "comment_author": "hadley", "comment_created_date": "2020-12-31T14:51:33Z", "comment_text": "Looks great - thanks Dennis!  Will probably be a few days until I merge it - ggplot2 has been submitted to CRAN and if something goes wrong with that I don't want to get confused about which changes are where."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMzMjE0ODA=", "comment_author": "djmurphy420", "comment_created_date": "2020-12-31T15:17:50Z", "comment_text": "HI Hadley:\nI'm just glad to finally figure out how this game works. It will make life a lot easier for the documentation projects.\nAssuming that my latest install from Github is the current state of the package, I'll make separate branches for the geom, scale and stat help pages and put whatever corrections/amendments in the appropriate branch. When the CRAN version comes out, I can double check against those, commit and push. In the meantime, I can start working on the scales doc and ggplot2 transition doc.\nD.\n\nFrom: hadley wickham reply@reply.github.com\nTo: Dennis Murphy djmurphy0420@yahoo.com\nSent: Saturday, December 31, 2011 6:51 AM\nSubject: Re: [ggplot2] Ggqplot (#340)\nLooks great - thanks Dennis! Will probably be a few days until I merge it - ggplot2 has been submitted to CRAN and if something goes wrong with that I don't want to get confused about which changes are where.\n\nReply to this email directly or view it on GitHub:\n#340 (comment)"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMzMjE0OTk=", "comment_author": "hadley", "comment_created_date": "2020-12-31T15:23:16Z", "comment_text": "Assuming that my latest install from Github is the current state of the package, I'll make separate branches for the geom, scale and stat help pages and put whatever corrections/amendments in the appropriate branch. When the CRAN version comes out, I can double check against those, commit and push. In the meantime, I can start working on the scales doc and ggplot2 transition doc.\n\nSounds good.  But don't worry about the CRAN release - just make sure\nyou're always making changes against the master branch and you'll\nalways be ok.\nHadley\n\nAssistant Professor / Dobelman Family Junior Chair\nDepartment of Statistics / Rice University\nhttp://had.co.nz/"}], "lubridate": [{"comment_id": "MDEyOklzc3VlQ29tbWVudDI5OTIxNDY=", "comment_author": "garrettgman", "comment_created_date": "2020-12-02T16:18:50Z", "comment_text": "Vald,\nThank you for solving these things.\nGarrett\nOn Fri, Dec 2, 2011 at 3:00 AM, Vald <\nreply@reply.github.com\n\nwrote:\nSmall adjustement in the 'c.period' method. This allow\nto combine period with list and data.frame without any\ncast.\nand\nThe calculation of 'day.no' is time consuming, especially\nwhen working with thousands of intervals. A test is added\nin order to do this calculation only if needed to optimize time\ncalculation.\nYou can merge this Pull Request by running:\ngit pull https://github.com/Vald/lubridate master\nOr you can view, comment on it, or merge it online at:\n#102\n-- Commit Summary --\n\nThe calculation of 'day.no' is time consuming, especially when working\nwith thousands of intervals. A test is added in order to do this\ncalculation only if needed to optimize time calculation.\nSmall adjustement in the 'c.period' method. This allow\n\n-- File Changes --\nM R/periods.r (15)\n-- Patch Links --\nhttps://github.com/hadley/lubridate/pull/102.patch\nhttps://github.com/hadley/lubridate/pull/102.diff\n\nReply to this email directly or view it on GitHub:\n#102"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI5OTc3MTI=", "comment_author": "Vald", "comment_created_date": "2020-12-03T00:06:43Z", "comment_text": "I'm developping a package which uses intensively the lubridate package.\nSince I need some functionalities that are not already available in lubridate, I developed some specific functions for periods and intervals.\nThe one proposed there (Ops.period) could solve the issue #73. If it fits to your needs, you can add it to lubridate (and I can remove it from my own package :) )."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI5OTkxMjg=", "comment_author": "garrettgman", "comment_created_date": "2020-12-03T05:04:05Z", "comment_text": "Vald,\nThat's wonderful. You should these to your package. It will be awhile\nbefore I can get the next version of lubridate out.\nGarrett\nOn Fri, Dec 2, 2011 at 6:06 PM, Vald <\nreply@reply.github.com\n\nwrote:\nI'm developping a package which uses intensively the lubridate package.\nSince I need some functionalities that are not already available in\nlubridate, I developed some specific functions for periods and intervals.\nThe one proposed there (Ops.period) could solve the issue #73. If it fits\nto your needs, you can add it to lubridate (and I can remove it from my own\npackage :) ).\n\nReply to this email directly or view it on GitHub:\n#102 (comment)"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDExNDE5NTg4", "comment_author": "garrettgman", "comment_created_date": "2020-12-16T16:41:49Z", "comment_text": "Ian,\nThank you for the functions. These look great.\nHave you seen the stamp() function in lubridate? It might've been a bit of feature creep, but we are trying to offer formatted output where related to dates and times.\nGarrett"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDExNTA5OTQ5", "comment_author": "ijlyttle", "comment_created_date": "2020-12-18T23:09:26Z", "comment_text": "Hi Garrett,\nI saw stamp soon after I made the pull request -- Doh! Certainly a cleaner approach than helper_offset(). Is it worth me proposing an implementation within stamp() such that \"helper_offset\" would not mess up the namespace? Happy to tinker with stamp(); you always have the 'reject pull request' button at your disposal.\nIan"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDExNTEwMzEx", "comment_author": "garrettgman", "comment_created_date": "2020-12-18T23:20:06Z", "comment_text": "Ian,\nI mostly just wanted to point out that formatted output wouldn't be feature\ncreep, at least not new feature creep ;).\nHow would you combine helper_offset with stamp? Would you stamp a date with\nan offset and then use it to convert other dates to the same offset? If\nthat's a useful workflow for you, I'd love to add it to the stamp function.\nHowever, helper_offset may be closer to what you want. I haven't worked\nwith ISO-8601 date-times enough to get a good feel for the use cases. I'b\ndefinitely be interested to see anything you come up with.\nThanks for the unit tests you provided with your pull request. Those are\nalways a welcome feature!\nGarrett\nOn Tue, Dec 18, 2012 at 5:09 PM, Ian Lyttle notifications@github.comwrote:\n\nHi Garrett,\nI saw stamp soon after I made the pull request -- Doh! Certainly a cleaner\napproach than helper_offset(). Is it worth me proposing an implementation\nwithin stamp() such that \"helper_offset\" would not mess up the namespace?\nHappy to tinker with stamp(); you always have the 'reject pull request'\nbutton at your disposal.\nIan\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com//pull/143#issuecomment-11509949."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDExNTExNjY2", "comment_author": "ijlyttle", "comment_created_date": "2020-12-19T00:04:19Z", "comment_text": "Garrett,\nNo problem to provide unit tests - trying to form good habits...\nJust looking at the code for stamp now; I can honestly say that I have no idea how I would combine them.... I see that once we get into stamp(), we also get into lubridate_format() and the .parse*() family; things are weaved together very tightly. Yikes!\nI should make myself more familiar with stamp() before proposing a workflow.\nI think your suggestion to go with the superficial approach is the right one so long as you can tolerate the ugly code appendages :) Should the demand be there to modify the guts of the code to make a tighter integration, I'll be happy (to try) to help.\nNo problem making this a longer-term \"issue\".\nIan"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMxMjExNTQ2", "comment_author": "vspinu", "comment_created_date": "2020-12-26T05:11:52Z", "comment_text": "Hi guys,\nFull features C parser is in. It supports all numeric formats and ISO8601 time zones. Together it probably covers more than 99% of real life user cases. You might want to bump the version as it is quite an improvement.\nI have documented the new stuff but cannot roxygenise. Roxygen2 is not available on CRAN/R3.0.1 for some reason. The latest github from yihui gives:\n+ Error in get(fun, mode = \"function\", envir = parent.frame()) : \n  object 'ymdTz' of mode 'function' was not found\n\n---------------------------------- \n\n6: get(fun, mode = \"function\", envir = parent.frame())\n5: formals(partitum$object$value)\n4: roclet_rd_one(partitum, base_path)\n3: roc_process.had(roc, parsed, base_path)\n2: roc_process(roc, parsed, base_path)\n1: roxygenise(\".\")\n\nWould be nice if one of you could do it for me Thanks."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMxMjEyNDI1", "comment_author": "vspinu", "comment_created_date": "2020-12-26T06:08:45Z", "comment_text": "I am also adding other directory locations from OlsonNames."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMxMjM1Mzgw", "comment_author": "garrettgman", "comment_created_date": "2020-12-26T20:53:04Z", "comment_text": "Thank you Ian and Vitoshka. CRAN wants an update on the Solaris issue by New Years, so I'm going to submit the present version of Lubridate as a fix."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2ODY3Njk0", "comment_author": "vspinu", "comment_created_date": "2020-12-13T06:58:48Z", "comment_text": "\ud83d\udc4d"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2ODY3NzE3", "comment_author": "vspinu", "comment_created_date": "2020-12-13T06:59:44Z", "comment_text": "\ud83d\udc4d"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2ODY3NjY5", "comment_author": "vspinu", "comment_created_date": "2020-12-13T06:57:45Z", "comment_text": "Thanks for this. Sorry for taking so long."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2ODY3NjMz", "comment_author": "vspinu", "comment_created_date": "2020-12-13T06:56:16Z", "comment_text": "What's the actual strange error that you are seeing? Those things should in principle be never NA."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY3MzI0NDkx", "comment_author": "lselzer", "comment_created_date": "2020-12-17T13:52:59Z", "comment_text": "I have to look it up, I don't remember which script was."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY4NDI0NDkw", "comment_author": "vspinu", "comment_created_date": "2020-12-31T05:24:52Z", "comment_text": "Ok. The fix makes sense. It handles NAs in lt object. Thanks."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2NzAxMDk0", "comment_author": "vspinu", "comment_created_date": "2020-12-11T22:29:17Z", "comment_text": "I don't see any reason to use unevaluated match.call over there. It's probably a remnant from a much older version of that code.  Thanks for catching this up."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2NzA0MDY3", "comment_author": "vspinu", "comment_created_date": "2020-12-11T22:51:42Z", "comment_text": "Well, there was actually a reason to use that. It has to do with the peculiarities of argument passing under S4. With your patch and your example of  f the following will fail:\nf(new_interval(ymd(20090201), ymd(20090101)))\n\nI have adapted your patch to deal with this issue correctly."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2NzQyNzYw", "comment_author": "juba", "comment_created_date": "2020-12-12T08:05:17Z", "comment_text": "Thanks for taking my request into account and for correcting it. Maybe I would have spotted the problem if I had run the tests, which I didn't unfortunately."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2NzUzNzk0", "comment_author": "larmarange", "comment_created_date": "2020-12-12T10:06:37Z", "comment_text": "With Julien Barnier, we discussed how to compute properly ages (see juba/questionr#45) and developed a age function based on lubridate. In particular, the issue was to take into account calendar time and not to use simply the mean duration of a year.\nDue to the scope of lubridate, we thought that this function could be directly integrated in your package.\nBest regards"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2ODMxMjEx", "comment_author": "vspinu", "comment_created_date": "2020-12-12T20:35:31Z", "comment_text": "It seems to me that age is a  \"period\" and that age function should return a \"period\" (not just a number) in order to play well with lubridate ecosystem. If that's the case then as.period(interval(start, end)) does precisely that:\n> birth <- ymd('1900-01-01')\n> death <- ymd('1999-12-31')\n> age <- as.period(interval(birth, death))\n> birth + age == death\n[1] TRUE\n> year(age)\n[1] 99\n\nWhat your age function seems to do differently is  the exact = TRUE argument. But that basically means that you treat age as an interval object.\nI see two ways to deal with this generically:\n\n\nExtend lubridate accessors (year, month etc) to work on interval objects and to have exact = TRUE argument as in your function. Then you can do year(interval(birth, death), exact = T) to do what your function does.\n\n\nAdd a new generic extractor age with unit argument that would work on interval and period objects. On period objects, exact argument might not make sense for some units, but surelly we will find a way to deal with it."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2ODM1NTg2", "comment_author": "larmarange", "comment_created_date": "2020-12-12T21:08:10Z", "comment_text": "The origin of this function was the issue of computing age in a demographic way, demographers defining both age at last birthday and exact age (see http://en-ii.demopaedia.org/wiki/32#322).\nIn a demographic perspective, age is defined as a number in a specific unit of time, while the concept of period implemented is the sum of different units of time. However, I understand your point of view.\nThe main challenge is effectively to compute the exact age. You need to have a continuity through time. Therefore, the decimal part of age depends on the first date (or date of birth), as years (or months) doesn't have the same number of days. Therefore, knowing only the period is not enough to compute properly the exact age, as 100 days will not represent the same proportion of the year if year has 365 or 366 days.\nAnother point is that a period object in lubridate could have any number of years, months, etc. How to calculate an age in years with an object like period(c(1,23,456),c(\"years\",\"months\",\"days\"))?\nIn my perspective (once again, I'm thinking as demographer), an age is based on the concept of anniversary and depends therefore of the start date.\nFollowing that you wrote, approach 1 (extending lubridate accessors) would do the job.\nBest regards"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2ODM4NTQw", "comment_author": "larmarange", "comment_created_date": "2020-12-12T21:32:27Z", "comment_text": "Option 2 could also work, with an origin argument in case of a period object.\nBut, arithmetic between dates and periods should be extended first. Right now, lubridate doesn't deal with such following cases:\nymd('2012-03-31')+period(1,\"months\")\nymd('2012-02-29')+period(1,\"year\")\ni.e. when the target month doesn't have the same number of days."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2ODU3NDg5", "comment_author": "vspinu", "comment_created_date": "2020-12-13T00:53:13Z", "comment_text": "period object in lubridate could have any number of years, months, etc. How to calculate an age in years with an object like period(c(1,23,456),c(\"years\",\"months\",\"days\"))?\n\nThe accessor will work exactly on intrervals, but for periods it wil apply an average year/month length.  The computation on periods not containing years or months is exact.\nThe problem with approach 1 is that you cannot create periods with non-integers, like period(3.4, \"years\") so it would be somewhat inconsistent to return a non-integer number in accessors. Also year, month etc were deigned only as simple pickers of internals, and only for period class. A bit wasteful IMO.\nAnyways, let's go with approach 2. There is already a function int_length for returning length of an interval. So instead of introducing new function, let's extend int_length. It's both, more parsimonious and more generic. We can also dispense with the extra argument exact in this case.\nWe can even introduce a new generic time_length which would work on interval, period and duration objects. Would you be willing to do that work?\n\n\nymd('2012-03-31')+period(1,\"months\")\nymd('2012-02-29')+period(1,\"year\")\n\nThis is by design. See %m+% and Period-class for explanation."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2ODcxODk3", "comment_author": "larmarange", "comment_created_date": "2020-12-13T10:20:35Z", "comment_text": "Dear Vitalie,\nI could propose a pull request to extent int_length.  However, I just have some thought/question. There is a little difference in common usage (every day life) when dealing with intervals in a calendar unit. In fact, it's similar to the difference between trunc and round. Let me explain:\nIn some cases, you will consider that the interval between 5 January 2012 and 20 December 2014 is approximatively 2 years. If you think in terms of age, age at last anniversary will be 1 completed year. And finally, the exact age will something like 1.94.\nIn the case of int_length, the main concept is that you want the duration of the interval, and therefore probably much more something similar to round.\nOne option could be that int_length always return an exact age and then people could use directly trunc or round.\nSecond question:\nwould in that scenario having an age function/method (as a wrapper) be relevant? Just to have shorter code. Such function could accept:\n\nan interval\ntwo dates\na period and a start date\n\nWhat do you think?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2ODkyODgz", "comment_author": "vspinu", "comment_created_date": "2020-12-13T21:48:33Z", "comment_text": "One option could be that int_length always return an exact age and then people could use directly trunc or round.\n\nYes. I like this idea. Though it's more computationally intensive, but the conceptual simplicity is a higher target.\n\nwould in that scenario having an age function/method (as a wrapper) be relevant? Just to have shorter code. Such function could accept:\n\nI have two issues with this approach. The minor one, is the name age which is too specific. More importantly, I don't think it's a good design for two reasons. Firstly, you want to avoid having multiple functions doing similar things (like age and int_length). That's confusing for the user and for the maintainer alike. Secondly, functional programming is all about composing functionality and compositions like int_length(interval(start, end)), int_length(start + period) are better than age(start, end), age(start, period). Better have multiple functions doing specific things well than one function doing a lot of stuff not so well.\nTo be fully honest i don't like int_length original design approach either. As I said before, it would be much nicer to add span_length generic that would work consistently on all spans: durations, periods and intervals and to obsolete int_length altogether. Shall we try that? It's not that difficult, I would expect."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2OTA2NTgz", "comment_author": "larmarange", "comment_created_date": "2020-12-14T08:39:53Z", "comment_text": "OK, I wrote a generic timespan_length method working with period, duration, difftime and interval objects.\nI was not sure about the name between timespan_length time_length or span_length. The later was not intuitive for me.\nI didn't change int_length yet. Do you want to keep it for backward compatibility (in that case it could be just a wrapper to timespan_length) or do you want to remove it?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2OTA3NTEx", "comment_author": "larmarange", "comment_created_date": "2020-12-14T09:28:29Z", "comment_text": "My repository became unclean after trying to merge with last changes in the dev reposirory.\nI will prepare a new clean pull request."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2OTA4OTI1", "comment_author": "vspinu", "comment_created_date": "2020-12-14T10:38:20Z", "comment_text": "Great!\nThe name is a bit too long. Let's ponder a bit more on it. I will review\nthe code tomorrow.\nOn Dec 14, 2014 1:35 AM, \"Joseph\" notifications@github.com wrote:\n\n\nYou can merge this Pull Request by running\ngit pull https://github.com/larmarange/lubridate master\nOr view, comment on, or merge it at:\n#288\nCommit Summary\n\na timespan_length method\n\nFile Changes\n\nM R/timespans.r\nhttps://github.com/hadley/lubridate/pull/288/files#diff-0 (57)\n\nPatch Links:\n\nhttps://github.com/hadley/lubridate/pull/288.patch\nhttps://github.com/hadley/lubridate/pull/288.diff\n\n\u2014\nReply to this email directly or view it on GitHub\n#288."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2OTI4NDQy", "comment_author": "vspinu", "comment_created_date": "2020-12-14T20:34:29Z", "comment_text": "Overall the code looks good. Please address my comments and squash all commits into one.\nCould you please add a couple of tests? I have a feeling that it might break with negative intervals because of #285.\nDoes the default method work for the difftime objects?\nThanks."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2OTI5MTg1", "comment_author": "larmarange", "comment_created_date": "2020-12-14T20:54:04Z", "comment_text": "I will work on it tomorrow.\nDo you have a specific way to manage tests?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2OTI5MTk2", "comment_author": "larmarange", "comment_created_date": "2020-12-14T20:54:25Z", "comment_text": "The default method works on difftime.\nRegards"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2OTMyNDA0", "comment_author": "vspinu", "comment_created_date": "2020-12-14T22:12:02Z", "comment_text": "Do you have a specific way to manage tests?\n\nYes. Simply add a couple of test_that statement to inst/tests/test-timespans.R."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2OTczNzk3", "comment_author": "larmarange", "comment_created_date": "2020-12-15T10:17:37Z", "comment_text": "OK\nso I changed the name to time_length. It's now a S4 method. I addressed your comments. And I have added some tests.\nSo far, I have one failing test, in the specific cases of individuals born a 29 Feb.\nPlease consider the following example:\n> time_length(interval(ymd('1992-02-29'), ymd('1999-02-28')), \"years\")\n[1] 7\n> time_length(interval(ymd('1992-02-29'), ymd('1999-03-01')), \"years\")\n[1] 7.002732\nIn fact, the 28th Feb 1999, this individual didn't turn 7 yet. The result should be something like 6.99. Computing the period works well:\n> x <- interval(ymd('1992-02-29'), ymd('1999-02-28'))\n> as.period(x)\n[1] \"6y 11m 30d 0H 0M 0S\"\n> # NB\n> as.period(interval(ymd('1992-02-29'), ymd('1999-03-01')))\n[1] \"7y 0m 0d 0H 0M 0S\"\nThe issue comes from computing next anniversary:\n> next_anniversary <- int_start(x) %m+% period(7, units = \"year\")\n> next_anniversary\n[1] \"1999-02-28 UTC\"\nIn fact, we should consider that next anniversary is 1999-03-01 (in this specific case).\nThe issue comes from %m+% operator which restrict to the last day of the nth month. Which is only one way to deal with months computation. In other situations (like age computation), you need to consider that the result should be the first day of the (n+1)th month.\nTherefore, should we think about an alternative operator like %m++% (and then people will have two options when dealing computation with calendar time) or should this specific case be handled directly in time_length?\nNote: epptools package propose a age_calc function (see https://github.com/jknowles/eeptools/blob/master/R/age_calc.R).\n> age_calc(as.Date('1992-02-29'), as.Date('1999-02-28'), units=\"years\")\n[1] 6.997702\n> age_calc(as.Date('1992-02-29'), as.Date('1999-03-30'), units=\"years\")\n[1] 7.079452\nNote 2: I will squash all commits once the pull request will be completely ready."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY3MDUxMjc1", "comment_author": "vspinu", "comment_created_date": "2020-12-15T19:35:10Z", "comment_text": "Yeah. This is a problem indeed. I think %m++% is actually a good idea. If\n29th is missing it should be between 28th and 1st.\nI wonder if we can use some shortcuts here. Wouldn't it be equivalent to\ndirectly use standard length of the year minus one day irrespective of the\nleap year?\nOn Dec 15, 2014 2:17 AM, \"Joseph\" notifications@github.com wrote:\n\nOK\nso I changed the name to time_length. It's now a S4 method. I addressed\nyour comments. And I have added some tests.\nSo far, I have one failing test, in the specific cases of individuals born\na 29 Feb.\nPlease consider the following example:\n\ntime_length(interval(ymd('1992-02-29'), ymd('1999-02-28')), \"years\")\n[1] 7> time_length(interval(ymd('1992-02-29'), ymd('1999-03-01')), \"years\")\n[1] 7.002732\n\nIn fact, the 28th Feb 1999, this individual didn't turn 7. The result\nshould be something like 6.99. Computing the period works well:\n\nx <- interval(ymd('1992-02-29'), ymd('1999-02-28'))> as.period(x)\n[1] \"6y 11m 30d 0H 0M 0S\"\n\nThe issue comes from computing next anniversary:\n\nnext_anniversary <- int_start(x) %m+% period(7, units = \"year\")> next_anniversary\n[1] \"1999-02-28 UTC\"\n\nIn fact, we should consider that next anniversary is 1999-03-01 (in this\nspecific case).\nThe issue comes from %m+% operator which restrict to the last day of the\nnth month. Which is only one way to deal with months computation. In other\nsituations (like age computation), you need to consider that the result\nshould be the first day of the (n+1)th month.\nTherefore, should we think about an alternative operator like %m++% (and\nthen people will have two options when dealing computation with calendar\ntime) or should this specific case handled directly in time_length?\nNote: epptools package propose a age_calc function (see\nhttps://github.com/jknowles/eeptools/blob/master/R/age_calc.R).\n\nage_calc(as.Date('1992-02-29'), as.Date('1999-02-28'), units=\"years\")\n[1] 6.997702> age_calc(as.Date('1992-02-29'), as.Date('1999-03-30'), units=\"years\")\n[1] 7.079452\n\nNote 2: I will squash all commits once the pull request will be completely\nready.\n\u2014\nReply to this email directly or view it on GitHub\n#288 (comment)."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY3MDUzMDA3", "comment_author": "larmarange", "comment_created_date": "2020-12-15T19:46:02Z", "comment_text": "I wonder if we can use some shortcuts here. Wouldn't it be equivalent to\ndirectly use standard length of the year minus one day irrespective of the\nleap year?\n\nI'm not sure to understand what you mean here.\nWe should also not forget that similar issue exists when dealing with a duration/age in months."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY3MDU3NTEx", "comment_author": "larmarange", "comment_created_date": "2020-12-15T20:14:58Z", "comment_text": "I was just doing some additional tests, in particular this one:\n> time_length(interval(ymd('1999-02-28'), ymd('1992-02-29')), \"years\")\n[1] -6.997268\n> time_length(interval(ymd('1999-03-01'), ymd('1992-02-29')), \"years\")\n[1] -7.002732\nSo, with negative intervals, it's exactly the expected result.\nMy first feeling (and I probably need more time to see things more clearly) is about %m-% (or using %m+% with a negative period).\nSo far, %m+% and %m-%   always rollback to the day before, which means a day closer to origin (start date) for an addition and a day more distant from origin for a subtraction. My feeling is that there is something wrong here and that we should have a sort of symmetry for the same operator.\nProbably something to explore."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY4MTk2Nzk3", "comment_author": "vspinu", "comment_created_date": "2020-12-28T02:58:18Z", "comment_text": "I wonder if we can use some shortcuts here. Wouldn't it be equivalent to  directly use standard length of the year minus one day irrespective of the leap year?\n\nI'm not sure to understand what you mean here.\n\nI meant that maybe we can avoid using %m+% and just check if the year is a leap year. This still leaves out the leap second but that's a minute imprecision.\n\nSo far, %m+% and %m-% always rollback to the day before, which means a day closer to origin (start date) for an addition and a day more distant from origin for a subtraction. My feeling is that there is something wrong here and that we should have a sort of symmetry for the same operator.\n\nThe main task of %m+/-% is to keep arithmetics of months right. That is, yy-mm-dd - x months will give a date with month being mm-x. I think this is not clear from the docs. I will fix that up. So, having a round semantics like ymd(100330) %m-% months(1) == 2010-03-01 is not really an option. So I am afraidtime_length` should recur to direct computation.\nI am still thinking about %m++ and I cannot really think of real applications at the moment. Can you think of any real user patterns? If it's not really useful then there is no point adding it. It also violates month arithmetic and should probably be named differently, not with m in it."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY4MjAzNjU3", "comment_author": "larmarange", "comment_created_date": "2020-12-28T10:37:53Z", "comment_text": "Your shortcut will work.for years, but with months it would be more complex.\nI don't see right now other use of %m++% except than anniversary computation. Therefore, several options available:\n1 Make %m++% an internal function\n2 Create a function called anniversary with 3 arguments: date of birth, integer, unit (month or years)  This function could be internal or exported.\n3 add an option rollback_begin_of_month to the internal function .month_plus"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY4MjQ1Nzgy", "comment_author": "vspinu", "comment_created_date": "2020-12-29T10:15:41Z", "comment_text": "time_length(interval(ymd('1992-02-29'), ymd('1999-02-28')), \"years\")\n[1] 7\nIn fact, the 28th Feb 1999, this individual didn't turn 7 yet. The result should be something like 6.99.\n\n\nLet's take a simpler example:\n\ntime_length(interval(ymd('1992-02-29'), ymd('1993-02-28')), \"years\")\n[1] 1\n\n1993 is not a leap year and it has only 365 days. Adding 365 days to 1992-02-29 lands you into 1993-02-28. This is one way of looking at it. The other way is to consider that next cycle has 366 days. Then you land on 1994-02-28 24:00:00, and the next cycle of 365 days will land you again on 1995-02-28 24:00:00. The interesting part is that next cycle of 365 days will lend you on 1996-02-29 00:00:00 which is exactly right.\nSo it all comes to conventions about the computation of the \"start\" of the leap year. The second convention is in line with your comment above and I think it's less confusing. Your code adders to the first convention.\nI have spent quite some time today into bypassing %m+% and I almost got to something, but it's still not working right. You were right, it's far from trivial."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY4MjQ5Mjg5", "comment_author": "larmarange", "comment_created_date": "2020-12-29T11:12:32Z", "comment_text": "The issue is also to be consistent with period computation.\n> as.period(interval(ymd('1992-02-29'), ymd('1993-02-28')))\n[1] \"11m 30d 0H 0M 0S\"\nWe obtain 0 year + 11m 30d so we expect time_length to be < 1. (i.e. the trunc part of time_length should be equal to @year of the period object.\n%m++% (or its equivalent) will solve the problem."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY4MjUwMTUy", "comment_author": "larmarange", "comment_created_date": "2020-12-29T11:25:59Z", "comment_text": "I have updated time_length to use %m++% (not exported) for testing purpose. The function pass now all implemented tests.\nWe still need to decide how to implement %m++% or its equivalent."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY4MjU1NTg4", "comment_author": "vspinu", "comment_created_date": "2020-12-29T13:03:41Z", "comment_text": "I have already squashed and merged your old version into 8c08adc.\nAnd I have implemented a version that completely bypasses the m+ operator by computing the length from first principles. Unfortunately it's quite complex, and if there are no major performance differences I would be happy to roll it into simpler m++ implementation. We need some more corner cases tests."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY4MjU1Njc1", "comment_author": "vspinu", "comment_created_date": "2020-12-29T13:04:59Z", "comment_text": "Btw, you are working on a badly broken old version of lubridate. Would be nice if you could add m++ m-- on top of master."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY4MjY0MTc0", "comment_author": "larmarange", "comment_created_date": "2020-12-29T15:01:56Z", "comment_text": "Alright. I will update my version.\nRegarding %m++%, do you want to export it (i.e. will be available for everyone) or do you prefer to keep it as an internal function?\nI'm not sure about implementing a %m--% operator as it's not intuitive (i.e. we roll back to the first day of the next month). However, it could be done directly by adding a negative period with %m++%.\nRegards"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY4MzEwOTM1", "comment_author": "vspinu", "comment_created_date": "2020-12-29T22:34:59Z", "comment_text": "Regarding %m++%, do you want to export it (i.e. will be available for everyone) or do you prefer to keep it as an internal function?\n\nLet's start first with non-exported version and make sure it works as expected. As I said before, my main concern is that this operator breaks the months arithmetic which is the main point of %m+%..  So I would prefer not to export it unless it's proven useful outside this limited situation.  If we have %m++% we will need %m--% to match %m-%.\n."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY4MzU5MDM0", "comment_author": "larmarange", "comment_created_date": "2020-12-30T14:13:53Z", "comment_text": "See new pull request #292"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY4MTk0NDA4", "comment_author": "vspinu", "comment_created_date": "2020-12-28T00:19:28Z", "comment_text": "If we have isoweek and isoyear, we need isomonth as well :). As you are on it could you please add that as well. Thanks."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY4MTk1NjM5", "comment_author": "datalove", "comment_created_date": "2020-12-28T01:38:03Z", "comment_text": "There actually is no concept of iso_month (or iso_quarter) since they don't align with weeks. There is however an iso_week_day_number (1-7, always starting Monday) which can of course be computed using a normal day_number_of_week function with weeks starting Monday. I don't see a day_number_of_week function. Is there one?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY4MTk3OTcx", "comment_author": "vspinu", "comment_created_date": "2020-12-28T04:18:49Z", "comment_text": "There actually is no concept of iso_month (or iso_quarter) since they don't align with weeks.\n\nAha, good point.\n\nThere is however an iso_week_day_number (1-7, always starting Monday) which can of course be computed using a normal day_number_of_week function with weeks starting Monday. I don't see a day_number_of_week function. Is there one?\n\nThere is wday but it starts on Sunday."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY4MTk4MDMz", "comment_author": "vspinu", "comment_created_date": "2020-12-28T04:22:35Z", "comment_text": "Ok. We are good to go. Please  squash them into one commit. It's one change conceptually and it would be nice to keep a clean history. Thanks."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY4MjI5NTcw", "comment_author": "datalove", "comment_created_date": "2020-12-29T03:12:10Z", "comment_text": "I'm having some trouble with squashing... is it alright if I submit a new pull request?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY4MjQyNjQ2", "comment_author": "vspinu", "comment_created_date": "2020-12-29T09:22:00Z", "comment_text": "I can do it for you, but it's a useful skill to have.\nIt comes handy every time you want to modify some previous commit. Look at interactive rebase. After you are done with it, force  push it with git push -f."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY4NDA2NDA3", "comment_author": "datalove", "comment_created_date": "2020-12-30T22:36:16Z", "comment_text": "Thanks Vitalie - happy for you to do it if it's possible.\nI made the mistake of trying to squash (using incorrect instructions) in the same branch that I was working on, before finding the interactive rebase instructions. Checking out what I have pushed to datalove/lubridate/isoyear doesn't seem to get me back to where I was before my original squash attempt."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY4NDE0OTcy", "comment_author": "vspinu", "comment_created_date": "2020-12-31T00:50:21Z", "comment_text": "Ok. Squashed and merged in 04f84a6. Thanks."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY4NDIzOTk5", "comment_author": "vspinu", "comment_created_date": "2020-12-31T05:06:32Z", "comment_text": "Ok. I have run some tests. On my i7 4760HQ m++ version takes about 10 sec for a vector of 10^6 dates and my from-scratch version takes about 5.6. IMO these are both awful timings so I went with your version. Mine is just too complicated.\nFor the reference, in case we ever want to write something of that kind again this is the from-scratch version 844959e.\nI have squashed your commits into 2. See the history. I then vectorized the code.\nIn the future if you commit typos or re-adjust the stuff use --amend to amend previous commit. Also don't reopen new pull threads just because your local copy got dirty. Simply push --force to overwrite your branch and github will do the updating."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDE2NzA3Nzk3OA==", "comment_author": "vspinu", "comment_created_date": "2020-12-24T09:38:50Z", "comment_text": "Thanks!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM0ODQ3NDU4Nw==", "comment_author": "vspinu", "comment_created_date": "2020-12-01T11:42:46Z", "comment_text": "Thank you!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM0ODUwOTI4Nw==", "comment_author": "ateucher", "comment_created_date": "2020-12-01T14:32:18Z", "comment_text": "My pleasure - thanks!"}], "stringr": [{"comment_id": "MDEyOklzc3VlQ29tbWVudDMwNDc2NzM=", "comment_author": "hadley", "comment_created_date": "2020-12-07T14:25:19Z", "comment_text": "Would you mind rebasing your fork against the latest changes?  Then I can pull in."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMwNDc4NjU=", "comment_author": "andrie", "comment_created_date": "2020-12-07T14:40:30Z", "comment_text": "Hadley\nOkay.  I think I did it. Do you want to try again?\nAndrie\nOn 07/12/2011 14:25, hadley wickham wrote:\n\nWould you mind rebasing your fork against the latest changes?  Then I can pull in.\n\nReply to this email directly or view it on GitHub:\n#11 (comment)"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMwNTAxMjU=", "comment_author": "hadley", "comment_created_date": "2020-12-07T17:21:21Z", "comment_text": "Still doesn't look right."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMwNTI1OTA=", "comment_author": "andrie", "comment_created_date": "2020-12-07T20:05:50Z", "comment_text": "OK. I've tried a bunch more things, including working through the commit\nqueue on github.\nIf it still doesn't work, can we have a quick Skype call to try and\nunderstand what the issue is?\nAndrie\nOn 07/12/2011 17:21, hadley wickham wrote:\n\nStill doesn't look right.\n\nReply to this email directly or view it on GitHub:\n#11 (comment)"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2MDM1NDg1", "comment_author": "jiho", "comment_created_date": "2020-12-08T08:07:35Z", "comment_text": "Thanks for the regain of activity on stringr! I did not know about stringi, it looks cool. The packages seem very similar now. Notwithstanding company policies (RStudio vs. Rexamine), wouldn't it save you both a lot of time to just merge them? Having several packages that do almost the same thing is also an aspect of R which is difficult for new / unconfident users. Anyhow, thanks for the work."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2MjkwMjQy", "comment_author": "hadley", "comment_created_date": "2020-12-09T14:30:14Z", "comment_text": "@jiho two main reasons:\n\nUpdating stringr gives every existing stringr user a big performance boost\nstringi is more of a developer library - I think it provides so many options that it would be overwhelming to a new user. So stringr provides a simple high-level API that glosses over some of the details in the interest of simplify, where stringi dives deep, giving you the ability to do anything you could ever imagine."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2Nzg1NzEz", "comment_author": "jiho", "comment_created_date": "2020-12-12T15:20:11Z", "comment_text": "@hadley thanks for the info. I'll surely continue to use stringr since I am comfortable with it and most of my code uses it. I was just wondering wether it was OK for stringi to be \"relegated\" to work behind the scene in that configuration, the ICU core might as well be integrated into stringr directly, adding some new functions for the complex aspects.\nBut anyhow, as a stringr-only user, I'm happy!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2MjA5MTEz", "comment_author": "hadley", "comment_created_date": "2020-12-08T23:36:28Z", "comment_text": "Hmmm, perform maybe?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2MjgyMDIx", "comment_author": "hadley", "comment_created_date": "2020-12-09T13:28:17Z", "comment_text": "Thanks! BTW pull requests track a branch, so you don't need to close the old and open a new."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDY2MjgyNzQw", "comment_author": "christophergandrud", "comment_created_date": "2020-12-09T13:33:54Z", "comment_text": "Sorry, was in a hurry and not thinking straight."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI2NDcyMTM4MA==", "comment_author": "smbache", "comment_created_date": "2020-12-04T18:33:41Z", "comment_text": "There's already str_interp in stringr ..."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI2NDcyMTcyMQ==", "comment_author": "ahoho", "comment_created_date": "2020-12-04T18:38:53Z", "comment_text": "Well, that's embarrassing. I'll close this PR, perhaps recreating a new one using str_interp that maintains the syntax I describe above."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI2NDcyMTkwMw==", "comment_author": "gagolews", "comment_created_date": "2020-12-04T18:41:34Z", "comment_text": "Note that stringi has the  %s+%   operator for concatenation.."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM1NDM1Nzk2Nw==", "comment_author": "hadley", "comment_created_date": "2020-12-28T21:06:55Z", "comment_text": "Luckily for you, stringr did get rejected, so I can merge this \ud83d\ude04"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM1NDM2ODYzOQ==", "comment_author": "yutannihilation", "comment_created_date": "2020-12-28T22:35:32Z", "comment_text": "Wow, I appreciate the luck. Thanks!"}]}