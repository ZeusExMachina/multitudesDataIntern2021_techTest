{"lubridate": [{"comment_id": "MDEyOklzc3VlQ29tbWVudDg3ODE4Nzk=", "comment_author": "garrettgman", "comment_created_date": "2020-09-21T22:04:52Z", "comment_text": "Vald, Thank you for your work on these. Last march I converted the S3 classes in lubridate to S4 classes because R deprecated the method lubridate originally used to let +, -, *, and / work with S3 classes. I tried to recapture a lot of your functionality, but obviously the S3 versions were no longer applicable :P"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDIzODY4NzE0", "comment_author": "ijlyttle", "comment_created_date": "2020-09-05T13:49:55Z", "comment_text": "The olson_time_zones() function fails for me on Ubuntu 13.04:\ncannot open file '/usr/share/R/share/zoneinfo/zone.tab': No such file or directory\nOn my Ubuntu machine, the zone.tab file lives at '/usr/share/zoneinfo/zone.tab'\nI can poke around to suggest a comprehensive solution - maybe someone knows the answer already."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDIzOTIxNTA3", "comment_author": "richierocks", "comment_created_date": "2020-09-06T06:33:09Z", "comment_text": "The code to find that file was taken directly from the example on the ?Sys.timezone help page (on a Windows machine).\nIan: Please can you run example(Sys.timezone) and tell me where it looks for the tzfile variable."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDIzOTIzMTM2", "comment_author": "vspinu", "comment_created_date": "2020-09-06T07:19:22Z", "comment_text": "One idea would be to use \"locate\" to find this file on unix-alike.\n\n\nRichard Cotton notifications@github.com\non Thu, 05 Sep 2013 23:33:10 -0700 wrote:\n\nThe code to find that file was taken directly from the example on the ?\nSys.timezone help page (on a Windows machine).\nIan: Please can you run example(Sys.timezone) and tell me where it looks for the\ntzfile variable.\n\u2014\nReply to this email directly or view it on GitHub."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDIzOTM2MzUz", "comment_author": "ijlyttle", "comment_created_date": "2020-09-06T12:28:09Z", "comment_text": "Here it is for both, for the sake of completeness.\nFor what it's worth, I am having no problems on Ubuntu to use with_tz(), etc.\nUbuntu 13.04:\nexample(Sys.timezone)\n\nSys.tm> Sys.timezone()\n[1] \"\"\n\nSys.tm> ## Not run: \nSys.tm> ##D ## need to supply a suitable file path (if any) for your system\nSys.tm> ##D tzfile <- \"/usr/share/zoneinfo/zone.tab\"\nSys.tm> ##D tzones <- read.delim(tzfile, row.names = NULL, header = FALSE,\nSys.tm> ##D     col.names = c(\"country\", \"coords\", \"name\", \"comments\"),\nSys.tm> ##D     as.is = TRUE, fill = TRUE, comment.char = \"#\")\nSys.tm> ##D str(tzones$name)\nSys.tm> ## End(Not run)\nSys.tm> \nSys.tm> \nSys.tm> \n\nWindows 7:\nSys.tm> Sys.timezone()\n[1] \"CDT\"\n\nSys.tm> tzfile <- file.path(R.home(\"share\"), \"zoneinfo\", \"zone.tab\")\n\nSys.tm> tzones <- read.delim(tzfile, row.names = NULL, header = FALSE,\nSys.tm+     col.names = c(\"country\", \"coords\", \"name\", \"comments\"),\nSys.tm+     as.is = TRUE, fill = TRUE, comment.char = \"#\")\n\nSys.tm> str(tzones$name)\n chr [1:418] \"Europe/Andorra\" \"Asia/Dubai\" \"Asia/Kabul\" \"America/Antigua\" \"America/Anguilla\" \"Europe/Tirane\" \"Asia/Yerevan\" ..."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDIzOTY5Njk2", "comment_author": "richierocks", "comment_created_date": "2020-09-06T21:13:14Z", "comment_text": "OK, I've now tried this under Linux Mint and I get the same result.  There doesn't seem to be an environment variable pointing to /usr/share, so hardcoding the file path (as ?Sys.timezone does) is probably the best bet.\nThe second line of olson_time_zones needs updating to\ntzfile <- if(.Platform$OS.type == \"windows\")\n{\n  file.path(R.home(\"share\"), \"zoneinfo\", \"zone.tab\")  \n} else\n{\n  \"/usr/share/zoneinfo/zone.tab\"  \n}\n\nOr slightly more cleanly (if Garrett doesn't mind adding a dependency on the assertive package)\ntzfile <- if(assertive::is_windows())\n{\n  file.path(R.home(\"share\"), \"zoneinfo\", \"zone.tab\")  \n} else\n{\n  \"/usr/share/zoneinfo/zone.tab\"  \n}\n\nI'm going on holiday in about 6 1/2 hours and I need to sleep, so it would be helpful if someone else sorts out the patch."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDIzNjMyODc4", "comment_author": "vspinu", "comment_created_date": "2020-09-01T20:53:45Z", "comment_text": "Ok, I made parse_date_time return POSIXct and it speed up things another 5x times. The change had virtually no sideeffects because all xxx_hmd functions were converting to POSIXct anyhow. Win-win situation.\nHere it is what we have right now:\n\n> tt <- c(rep(as.character(Sys.time()), 1e6))\n> options(lubridate.fasttime = FALSE)\n> system.time(out <- as.POSIXct(tt, tz = \"UTC\"))\n   user  system elapsed \n  9.872   0.172  10.064 \n> system.time(out <- ymd_hms(tt))\n   user  system elapsed \n  5.436   0.116   5.559 \n> options(lubridate.fasttime = TRUE)\n> system.time(out <- ymd_hms(tt))\n   user  system elapsed \n  0.380   0.068   0.461 \n>"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDIzODMyMzM1", "comment_author": "hadley", "comment_created_date": "2020-09-04T22:57:29Z", "comment_text": "I'm happy to add you as a admin to the repo, but you'll need to get a few pull requests pass me first, and I'm a bit tougher than Garrett ;) Comments on the contents to follow."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDIzODM4NDcx", "comment_author": "vspinu", "comment_created_date": "2020-09-05T01:32:01Z", "comment_text": "Well, I just want to modify my own code freely. Often there are small\ncorrection/improvements that I would like to add quickly, which might not\nworth the pull request.\nWhenever I will change the code of others I will always ask for opinions.\nOn 5 September 2013 00:57, hadley wickham notifications@github.com wrote:\n\nI'm happy to add you as a admin to the repo, but you'll need to get a few\npull requests pass me first, and I'm a bit tougher than Garrett ;) Comments\non the contents to follow.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com//pull/200#issuecomment-23832335\n."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDIzODQyMDQw", "comment_author": "vspinu", "comment_created_date": "2020-09-05T03:42:01Z", "comment_text": "All right. I have added some more commits and incorporated pretty much all your comments and suggestions.\nIf it is ok with you, I can also make C posix parser the default  and simply comment the troublesome test and leave it for later. I just don't have time these weeks too deal with it."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI1MjE5OTMz", "comment_author": "vspinu", "comment_created_date": "2020-09-27T03:20:55Z", "comment_text": "Indeed, this one should be merged.\nThanks,"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDE0NDAwMzAzOA==", "comment_author": "vspinu", "comment_created_date": "2020-09-29T09:18:05Z", "comment_text": "Why is this a fix? You will break a lot of existing functionality. Days and months could be negative in the period class, that's legal."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDE0NDAyMjM4Mg==", "comment_author": "AlunHewinson", "comment_created_date": "2020-09-29T10:44:33Z", "comment_text": "Closing as error made: will try again in a moment"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDE0NDA0MDk2OQ==", "comment_author": "vspinu", "comment_created_date": "2020-09-29T12:13:39Z", "comment_text": "I don't understand why you are setting day to 0. If the day componnet is negative, it's negative for a reason or not? Something is going wrong with the logic in that function. You cannot just overwrite it with 0 and label as fixed.\nI will try to have a look at it today.\n(You don't need close an issue and open a new one each time you change a thing. Simply git push --force to the same branch.)"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDE0NDM2OTMxNA==", "comment_author": "vspinu", "comment_created_date": "2020-09-30T11:35:55Z", "comment_text": "Fixed in 0bbe8c1"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI0NzA0NDcwMg==", "comment_author": "vspinu", "comment_created_date": "2020-09-14T15:08:06Z", "comment_text": "I think we need to show the fractional seconds then. round(x) doesn't look like the correct solution. I think we can safely use %s format there."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI0NzA1NDM3MQ==", "comment_author": "tsbattman", "comment_created_date": "2020-09-14T15:35:36Z", "comment_text": "Stopping the crash is the only thing I particularly care about. I only chose round(x) over %s in order to keep all the other tests passing. If you don't mind with the change in output produced by %s, I say go for it."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI0NzA5Mjg4OQ==", "comment_author": "vspinu", "comment_created_date": "2020-09-14T17:33:50Z", "comment_text": "Would you like to adjust your PR for %s?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI0NzIxMzgyOQ==", "comment_author": "tsbattman", "comment_created_date": "2020-09-15T02:12:14Z", "comment_text": "Sure deal. Should have it within a day."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI0ODU2NDExNA==", "comment_author": "vspinu", "comment_created_date": "2020-09-21T09:50:41Z", "comment_text": "@tsbattman is this ready to be pushed?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI0ODU3MjY2Nw==", "comment_author": "tsbattman", "comment_created_date": "2020-09-21T10:30:11Z", "comment_text": "I put in the change to use %s and modified the test suite accordingly. Should be good to go."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI0ODU3NjMwMA==", "comment_author": "vspinu", "comment_created_date": "2020-09-21T10:48:33Z", "comment_text": "Thanks!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMzMzE4Njc4NA==", "comment_author": "wlandau-lilly", "comment_created_date": "2020-09-29T17:23:43Z", "comment_text": "I am glad this was fixed. When do you think we might see an update on CRAN?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMzMzIzMzE5OA==", "comment_author": "vspinu", "comment_created_date": "2020-09-29T20:38:32Z", "comment_text": "Time permitting, next week."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI0OTkwMzAyMQ==", "comment_author": "vspinu", "comment_created_date": "2020-09-27T15:36:26Z", "comment_text": "Could you please add a test or two and add a line to the news file? Thanks."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI0OTkwODgwMA==", "comment_author": "shrektan", "comment_created_date": "2020-09-27T15:53:56Z", "comment_text": "I've added tests and lines in news. You're welcome. \ud83d\ude03"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMzMTQxMzI5NQ==", "comment_author": "lorenzwalthert", "comment_created_date": "2020-09-22T10:38:12Z", "comment_text": "Right... I guess it would not be that hard. However, I thought the idea of the tidyverse style guide was to have all packages formatted as uniformly as possible."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMzMTY5ODg1NA==", "comment_author": "vspinu", "comment_created_date": "2020-09-24T09:42:15Z", "comment_text": "I personally quite disagree with tidy's style on formating of divisions and multiplications.\n     inc_year <- q == 1 & uq == 4\n-    year(x) + inc_year + q/10\n+    year(x) + inc_year + q / 10\n\n\n-  if (with_year) year(x) + s/10\n+  if (with_year) year(x) + s / 10\n\n-  Y + sofar/total\n+  Y + sofar / total\nI don't think it's natural (as in hand-writing) nor it increases readability. So I would prefer to apply this without those changes. Is there an option in styler for this level of detail? If not, then be it."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMzMTcwMDU1Nw==", "comment_author": "lorenzwalthert", "comment_created_date": "2020-09-24T10:19:51Z", "comment_text": "There is an open issue on more granular control of math token spacing (r-lib/styler#86). From a technical point of view, it should not be difficult to implement that."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDMzMTc0NTMxMg==", "comment_author": "lorenzwalthert", "comment_created_date": "2020-09-24T22:41:03Z", "comment_text": "I used r-lib/styler#221 which aims to solve r-lib/styler#86 to style the package again, so spacing is should be set as desired.\nI ran\nstyle_pkg(\n  strict = FALSE, \n  scope = \"spaces\", \n  math_token_spacing = specify_math_token_spacing(zero = c(\"'/'\",\"'*'\"))\n)\nTo review the relevant diffs more easily, I used git diff e791315 62daa61."}], "stringr": [{"comment_id": "MDEyOklzc3VlQ29tbWVudDIwOTU0MTU=", "comment_author": "hadley", "comment_created_date": "2020-09-14T17:09:02Z", "comment_text": "Looks good overall - just added a few suggestions to improve readability.  Thanks for the contribution and sorry for taking so long to respond!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDIwOTU1MTI=", "comment_author": "andrie", "comment_created_date": "2020-09-14T17:15:58Z", "comment_text": "No problem!\nA\nOn 14/09/2011 18:09, hadley wickham wrote:\n\nLooks good overall - just added a few suggestions to improve readability.  Thanks for the contribution and sorry for taking so long to respond!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDIxMzIyMDk=", "comment_author": "andrie", "comment_created_date": "2020-09-19T10:25:25Z", "comment_text": "I have made all the requested changes."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDU0MDkzNjg5", "comment_author": "jiho", "comment_created_date": "2020-09-01T21:52:56Z", "comment_text": "Any chance of getting this in? I am using x[which(str_detect(x, ...))] more than I can count."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDU1ODEyODc1", "comment_author": "matthieugomez", "comment_created_date": "2020-09-16T21:00:25Z", "comment_text": "Do you really need which?\nstring[str_detect(string,pattern)]"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDU1ODYyODg0", "comment_author": "jiho", "comment_created_date": "2020-09-17T08:19:10Z", "comment_text": "Yes because:\nstr_detect(c(NA, \"abc\"), \"a\")\n\ngives NA and which eliminates those."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDU1ODkxMzY4", "comment_author": "matthieugomez", "comment_created_date": "2020-09-17T13:16:50Z", "comment_text": "Thanks!"}]}