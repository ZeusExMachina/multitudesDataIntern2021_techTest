{"ggplot2": [{"comment_id": "MDEyOklzc3VlQ29tbWVudDQxNzc0MTY=", "comment_author": "wch", "comment_created_date": "2020-02-26T00:00:03Z", "comment_text": "In #415, I took @djmurphy420's commits, rebased the changes on top of master, and fixed conflicts. If that's merged, this pull request can be closed."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQxNzc2MDQ=", "comment_author": "hadley", "comment_created_date": "2020-02-26T00:33:23Z", "comment_text": "Closing b/c of new pull request."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQwNTk3Mzk=", "comment_author": "hadley", "comment_created_date": "2020-02-20T19:09:18Z", "comment_text": "@kohske Could you flag that with a #' @TODO, or file another bug so we remember to fix it once gtable gets z-ordering?  Then I can pull the request."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQwNjAxNzk=", "comment_author": "kohske", "comment_created_date": "2020-02-20T19:32:17Z", "comment_text": "Is the #' @TODO correct flag? roxygen says\nTODO is an unknown key in block plot-render.r:2 \n\nOr could you please roxygenize yourself?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQwNjAyMDE=", "comment_author": "hadley", "comment_created_date": "2020-02-20T19:33:27Z", "comment_text": "Oh, I guess I just mean # @todo"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQwNjAyODc=", "comment_author": "kohske", "comment_created_date": "2020-02-20T19:38:40Z", "comment_text": "And I will issue this."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM3NTQzOTY=", "comment_author": "wch", "comment_created_date": "2020-02-01T06:31:51Z", "comment_text": "I decided to take my bisect script for a test drive on this bug. The problem was tracked to a6b74b2. Note that I don't really know anything about this bug, or the expected behavior -- I just assume that the result from 0.8.9 is correct. (I also don't really know whether I'm running the right tests - I just took an example from the mailing list.)\nI suggest trying the script yourself. You can download the script here: https://gist.github.com/1715469.  Save it in your ggplot2 directory and run:\nchmod +x stat_sum_test.r\ngit bisect start\n\ngit checkout master\n./stat_sum_test.r\n# Look at the result, and mark as bad -- although you gave an interactive response,\n# it wasn't automatically passed to git bisect. (That only happens with git bisect run)\ngit bisect bad\n\ngit checkout remotes/origin/ggplot-0.8.9\n./stat_sum_test.r\n# Look at the result, and mark as good\ngit bisect good\n\n# Now run automated testing with manual response\ngit bisect run ./stat_sum_test.r\n\nIf you already knew that master was bad and 0.8.9 was good, you could save some steps by doing this instead:\ngit bisect start master remotes/origin/ggplot-0.8.9\ngit bisect run ./stat_sum_test.r"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM3NTQ1MDQ=", "comment_author": "kohske", "comment_created_date": "2020-02-01T06:45:45Z", "comment_text": "Thanks, @wch!! Great bisect.\nNow I have figured out what is exactly problem.\nI will rewrite the fix with some test codes."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM3NTQ2MDY=", "comment_author": "wch", "comment_created_date": "2020-02-01T06:58:54Z", "comment_text": "@kohske glad to be helpful! I'm actually kind of surprised that the script worked so well for the first real problem I tried it on."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM4Njg3NjU=", "comment_author": "hadley", "comment_created_date": "2020-02-08T14:54:16Z", "comment_text": "Do you have any test cases?  I think the correct fix is:\n  calculate_groups <- function(., data, scales, ...) {\n    if (is.null(data$weight)) data$weight <- 1\n\n    group_by <- intersect(names(data), .all_aesthetics))\n    counts <- count(data, group_by, wt_var = \"weight\")\n    names(counts)[4] <- \"n\"\n    counts$prop <- ave(counts$n, counts$group, FUN = prop.table)\n\n    counts\n  }\nAvoiding the default calculate_groups makes the function considerably faster (i.e. it's vectorised)."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM4NzExNDg=", "comment_author": "kohske", "comment_created_date": "2020-02-08T16:57:46Z", "comment_text": "Ok, I will move it in the calculate_groups and will write a test case."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM4Mzg4Njk=", "comment_author": "hadley", "comment_created_date": "2020-02-06T23:08:53Z", "comment_text": "Would you mind using the new @family tag?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM4NDEwNTQ=", "comment_author": "briandk", "comment_created_date": "2020-02-07T02:01:44Z", "comment_text": "@hadley - Fixed. Are there any other functions that belong in the guides family for documentation?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM4NTc3NTc=", "comment_author": "hadley", "comment_created_date": "2020-02-07T22:03:32Z", "comment_text": "Roxygen comments look good, and I think that's all the guide related functions.  However, due to a roxygen bug (fixed in dev version), you're using a different sort order to me, and hence there are a lot of spurious changes."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM4NjI1NTc=", "comment_author": "briandk", "comment_created_date": "2020-02-08T04:57:38Z", "comment_text": "@hadley - I'm using the latest version of roxygen from the master branch on github: r-lib/roxygen2@179448a\nThere's no dev branch of roxygen, so I'm not sure which version you're referring to. Can you please point me to which branch contains the fix?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM4NjI4MjQ=", "comment_author": "briandk", "comment_created_date": "2020-02-08T05:40:11Z", "comment_text": "See the updated pull request #391"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM4NTcxNTc=", "comment_author": "hadley", "comment_created_date": "2020-02-07T21:32:33Z", "comment_text": "Thanks Brian!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM4Njg1Mjg=", "comment_author": "briandk", "comment_created_date": "2020-02-08T14:37:59Z", "comment_text": "@wch - We actually created our own geom to place rugs on the top and right. (An admittedly kludgy solution, but at the time creating a new geom seemed simplest.) I guess I have two concerns:\n\nWon't adding a sides argument to geom_rug() raise the expectation that other marginal gems should have sides too (e.g., that geom_dotplot() should accept a sides argument?)\nI wish there were a way to streamline the conditional logic in your draw() function. I know there probably isn't, but between the four corner conditions so much code gets repeated that I've been trying for awhile to think about how to reduce that duplication."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM4OTIxMDU=", "comment_author": "wch", "comment_created_date": "2020-02-09T17:54:14Z", "comment_text": "@briandk Yes, actually that's where I got the idea to do this -- when I was looking at the granovaGG code, I realized that it would be useful to offer this as an option\n\nWhat other geoms do you have in mind? I'm not sure in what way geom_dotplot is a marginal geom...\nI agree, it would be nice to clean up the draw() stuff. I thought about doing a loop with some conditional logic, but I think that might end up messier than what's there right now."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM4OTMwNzI=", "comment_author": "briandk", "comment_created_date": "2020-02-09T18:47:11Z", "comment_text": "@wch - here's an example of what I'm thinking of when I talk about a marginal dotplot:\n\nA default rug geom() does a great job of showing the locations of two-dimensional data on a univariate marginal distribution. But a rug geom() alone isn't as well suited to show frequencies of marginal values. That's where the dot plot shines, in my opinion.\nDoes that make sense, or am I misunderstanding what geom_dotplot() does?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQwMzc4NTM=", "comment_author": "wch", "comment_created_date": "2020-02-18T22:21:25Z", "comment_text": "I don't think geom_dotplot can be used this way, since the x or y baseline is at 0. This is different from geom_rug, where the lines are positioned on the edge of the plotting area, no matter what the x or y values are. I do agree that the marginal dot plots work better than marginal rugs in this case, though."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM4NzcwMTQ=", "comment_author": "hadley", "comment_created_date": "2020-02-08T21:52:19Z", "comment_text": "It probably should be customisable, but I'd prefer to figure out how to do it in general - there are many margins and paddings that should be user configurable."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM4ODIyNTA=", "comment_author": "kohske", "comment_created_date": "2020-02-09T05:21:34Z", "comment_text": "The codes have been updated.\nw.r.t the customize, we need to discuss about theme-ing system.\nMaybe CSS-like system, i.e., class-and-style?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQwNzQ5Njg=", "comment_author": "hadley", "comment_created_date": "2020-02-21T13:51:20Z", "comment_text": "Ah, I see how it works now.  I think we will have to come back to this in the future - and rewrite to use methods on a gtable object.  Generally, you shouldn't have to create the layout by hand (but you might have to do this currently because gtable doesn't provide enough useful tools)"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM4ODgwMzE=", "comment_author": "kohske", "comment_created_date": "2020-02-09T14:28:45Z", "comment_text": "So now users can explicitly specify for that breaks and labels are absent, by setting them NULL"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM4OTE3NDA=", "comment_author": "wch", "comment_created_date": "2020-02-09T17:35:49Z", "comment_text": "Cool - will breaks=NA still work?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM5MDE3MjI=", "comment_author": "kohske", "comment_created_date": "2020-02-10T06:13:19Z", "comment_text": "the behavior for breaks=NA is probably undefined. In 0.8.9, breaks=NA indicate no breaks, right?\nThen I will make it so for backward compatibility with a warning message."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM5MDE3ODI=", "comment_author": "wch", "comment_created_date": "2020-02-10T06:22:36Z", "comment_text": "Oh... breaks=NA is what I have always used for no breaks. Have I been doing it wrong all this time?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM5MDE4MDQ=", "comment_author": "kohske", "comment_created_date": "2020-02-10T06:25:38Z", "comment_text": "Okey, then I will implement this.\nIndeed, NA is buggy for some senses. e.g., length(NA) is 1 which indicate there is something.\nAnd actually I have no experience to remove breaks so I didn't know how to do this ;-p"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM5MDE4NzU=", "comment_author": "wch", "comment_created_date": "2020-02-10T06:33:26Z", "comment_text": "OK, good. I thought maybe I had missed something very basic... :)\nI think it would also be a good idea to give a message saying something like this:\nbreaks=NA is deprecated. Please use breaks=NULL to remove breaks in the scale."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQwNjA2MDQ=", "comment_author": "kohske", "comment_created_date": "2020-02-20T19:58:40Z", "comment_text": "Probably I have not roxygenized yet. Could you please do that, since I'm not sure which version of roxygen2 I should use?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQwNzIyMDQ=", "comment_author": "hadley", "comment_created_date": "2020-02-21T10:16:36Z", "comment_text": "Sure - but in principle, I should only ever be using the released version of roxygen."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM5ODcwODE=", "comment_author": "BrianDiggs", "comment_created_date": "2020-02-15T19:25:54Z", "comment_text": "You also need to update the generated documentation (via document() in devtools) and commit that to the branch."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM5ODc5MjA=", "comment_author": "jiho", "comment_created_date": "2020-02-15T20:09:07Z", "comment_text": "Oops indeed. It's done."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQwNjAxMTk=", "comment_author": "hadley", "comment_created_date": "2020-02-20T19:29:51Z", "comment_text": "Could you please also provide a non-visual test?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQwNjA1MTk=", "comment_author": "kohske", "comment_created_date": "2020-02-20T19:51:56Z", "comment_text": "Could you please also provide a non-visual test?\n\nSounds challenging... Ok, I will try :)"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQwNjA1NDA=", "comment_author": "kohske", "comment_created_date": "2020-02-20T19:53:54Z", "comment_text": "Now I found it is almost impossible.\nI tried to use the return value of ggplot_buide, but the return value is OK.\nThe bug is in the conversion from the data to geom.\nHow can I manage this type of bug in a non-visual test?\nShould I use grid.get?"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQwNjA2MzM=", "comment_author": "hadley", "comment_created_date": "2020-02-20T20:00:33Z", "comment_text": "Oh sorry, I forgot about that.  I think in the next version (1.0) it will be easier to do these tests."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQwNjA2NTA=", "comment_author": "kohske", "comment_created_date": "2020-02-20T20:01:39Z", "comment_text": "I think in the next version (1.0) it will be easier to do these tests.\n\nSounds nice !!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQyMzE5ODk=", "comment_author": "kohske", "comment_created_date": "2020-02-29T05:22:18Z", "comment_text": "Excellent!!\nMaybe the logticks (more generally, internal ticks) can be merged into the new positional guide system.\nBut it will take quite a long time, so I agree that the logticks annotation is merged into master."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQyMzIyNDU=", "comment_author": "wch", "comment_created_date": "2020-02-29T05:52:16Z", "comment_text": "That would be cool -- do you have anything written about where the positional guide system is going? I don't have a very clear idea of what it will do.\nIf you want to try it out (This requires a recent version of devtools because apparently previous versions always used the master branch):\ninstall_github('ggplot2', 'wch', 'feature/logticks')\nThe help file has many examples."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQyMzM1Mjk=", "comment_author": "kohske", "comment_created_date": "2020-02-29T08:14:59Z", "comment_text": "@wch Thanks. Now the branch is on my local repository and I can play with it.\n\nThat would be cool -- do you have anything written about where the positional guide system is going?\n\nNot yet. I will upload it on a github soon, in a few days, i hope.\nIt will be a variant of guide_axis, or guide_axis may have an option which inside or outside the ticks are drawn."}], "lubridate": [{"comment_id": "MDEyOklzc3VlQ29tbWVudDQxODUwMDg=", "comment_author": "mannyishere", "comment_created_date": "2020-02-26T22:07:41Z", "comment_text": "This would be great to merge into the production version of lubridate."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQyMjgxMDY=", "comment_author": "garrettgman", "comment_created_date": "2020-02-28T23:17:10Z", "comment_text": "Thanks jthetzel. This bug pretty much disappeared by fixing find_separator."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDEzNDM4NjA3", "comment_author": "garrettgman", "comment_created_date": "2020-02-12T15:46:53Z", "comment_text": "I agree that NA\nshould propagate. This is not controversial and is easy to implement. I\nwill do that.\nI completely agree.\n\n\nThere should be a way to avoid the \"no formats found\" error. That\nis, return a NA POSIXct as standard functions do. This is hugely\nhelpful in programming. Treating it with tryCatch all the time is a\nbig pain in the neck.\nI agree. Let's combine this with below.\n\n\nThe \"N failed to parse\" warning should stay by default,\nirrespective of the length(x). This warning doesn't occur that often\nand is very instructive.\nLet's keep the warning because it is helpful. If no formats are found, we\nshould just return a warning: \"All failed to parse. No formats found.\" The\nbehavior for 1) and 2) would align and be intuitive. Failure always gives a\nwarning with NA's.\n\n\nMessages \"N parsed with %X%Y%Z\" are not so useful, except to\ndevelopers. So they should not be there at all by default.\nI agree that they should not be there by default. This will also take care\nof the case where x < 10.\n\n\n\nI'd strongly prefer to control this behavior with an argument in the\nparsing functions (\"verbose\" would be fine). I'm not a fan of global\noptions because I prefer that\n\nThe code is consistent. The user gets the same thing every time the run\nthe code\nThe user needs to be explicit. They must ask for everything they get.\n\nIf you'd like the global option feature for your own use, we could set the\nverbose argument to verbose = options(\"lubridate.verbose\") in the function\ndefinition and lubridate.verbose = FALSE by default.\nI'll aim to send a new version of lubridate to cran in March, or once this\npull request is merged (whichever comes later).\nGarrett"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDEzNjg5MTkz", "comment_author": "ijlyttle", "comment_created_date": "2020-02-17T17:11:52Z", "comment_text": "Hi guys,\nI have more trouble to propose, this time with stamp().\nConsider a local time (when my taxes are due):\n> sample_local_time <- ymd_hms(\"2013-04-15 23:59:59\", tz=\"America/Chicago\")\n> sample_local_time\n[1] \"2013-04-15 23:59:59 CDT\"\nThe current behavior is:\n> stamp(\"2001-12-31T04:05:06Z\")(sample_local_time)\nUsing: \"%Y-%m-%dT%H:%M:%SZ\"\n[1] \"2013-04-15T23:59:59Z\"\nI think this is problematic, because we have put the \"Z\" at the end without changing the timezone.\nThe proposed behavior is:\n> stamp(\"2001-12-31T04:05:06Z\")(sample_local_time)\nUsing: \"%Y-%m-%dT%H:%M:%SZ\"\n[1] \"2013-04-16T04:59:59Z\"\nIn my iso8601 branch , commit 98cab43, I have proposed changing the stamp function such that if a \"Z\" format is requested, stamp will return a function that will convert the time to UTC.\nHere is the operative part of stamp() within stamp.r:\n  f <- eval(\n         substitute(\n           function(x){\n\n             # if the format specifies UTC, change timezone to UTC\n             if (str_detect(FMT, \"Z$\")){\n               x <- with_tz(x, tzone=\"UTC\")  \n             }\n\n             format(x, format = FMT)\n           }, \n           list(FMT = FMT)\n         ), \n         envir = topenv()\n       )\nAgain, this may be ugly and inefficient code, so I will not be offended in the least should more-elegant means be implemented.\nI have also added a line to `test-stamp.r' but:\n\nThis line is not actually testing the conversion of the timezone as the reference time is in UTC\nWhen I run test(\"lubridate\", \"stamp\"), I don't get any of the reassuring dots.\n\nIf this seems like a good path to follow, I would like to have the same stamping capability for the \"offset\" formats , i.e. 2012-03-04T05:06:07+01, 2012-03-04T05:06:07+0100.\nThis may be ambitious for the proposed March release to CRAN, so I look forward to your thoughts.\nThanks,\nIan"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDEzNTExNTc0", "comment_author": "garrettgman", "comment_created_date": "2020-02-13T19:12:11Z", "comment_text": "Looks good. Thanks!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDEzNTEzNDcz", "comment_author": "hadley", "comment_created_date": "2020-02-13T19:35:16Z", "comment_text": "FYI you're missing an @export"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM1NzU1MTQz", "comment_author": "statwonk", "comment_created_date": "2020-02-21T17:53:12Z", "comment_text": "@Vitoshka Just want to say that I really appreciate this work!  I waited about 4 minutes for as.POSIXct() to finish before killing it.  fast_strptime worked in under 2 seconds on 16MM rows!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM1NzU1MzAx", "comment_author": "hadley", "comment_created_date": "2020-02-21T17:54:38Z", "comment_text": "BTW the official roxygen2 repo is https://github.com/klutometis/roxygen"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDcyNDYyMDEx", "comment_author": "jiho", "comment_created_date": "2020-02-02T14:02:37Z", "comment_text": "Potential problems:\n\nR/parse.r l. 455 as.character is used with randomly generated numbers which may end with many zeros by chance.\ninst/tests/test-parser.r l. 520 same as above.\nR/parse.r l. 489, as.character is used when it is not necessary (.num_to_date always returns a character)\n\nThe other uses in the source code do not seem problematic to me."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDcyNDYyNDE0", "comment_author": "jiho", "comment_created_date": "2020-02-02T14:05:36Z", "comment_text": "I've addressed the comments above. Let me know what you think. I guess I'll need to squash the commits again but I'll rather do that when all is accepted."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDcyNTE4ODM5", "comment_author": "vspinu", "comment_created_date": "2020-02-02T19:18:24Z", "comment_text": "R/parse.r l. 455 as.character is used with randomly generated numbers which may end with many zeros by chance.\n\nProbably not an issue as as.character is applied to POSIXct object. as.character(.POSIXct(1000000000000)) works as expected.\n\nR/parse.r l. 489, as.character is used when it is not necessary (.num_to_date always returns a character)\n\nGood catch. That makes me think that .num_to_date is a misnomer. It doesn't convert to date.\n\nI've addressed the comments above. Let me know what you think. I guess I'll need to squash the commits again but I'll rather do that when all is accepted.\n\nYes. Looks good. Please squash. Instead of adding new commits you can always amend previous commit and then force push.\nThanks."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDcyOTk5OTAx", "comment_author": "jiho", "comment_created_date": "2020-02-05T06:17:33Z", "comment_text": "Squashed commits"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDczMDIyNjkx", "comment_author": "vspinu", "comment_created_date": "2020-02-05T10:10:00Z", "comment_text": "\ud83d\udc4d Thanks!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDczMDMwMDQ3", "comment_author": "jiho", "comment_created_date": "2020-02-05T11:10:52Z", "comment_text": "You are welcome. Happy to help."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDczNjQzNDU1", "comment_author": "jonboiser", "comment_created_date": "2020-02-10T04:41:27Z", "comment_text": "Took awhile, but got the PR all cleaned up with a minimal diff."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDczNjY4OTk5", "comment_author": "vspinu", "comment_created_date": "2020-02-10T09:29:28Z", "comment_text": "\ud83d\udc4d  Thanks."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDE3ODk4MTI5Ng==", "comment_author": "joethorley", "comment_created_date": "2020-02-03T03:32:35Z", "comment_text": "Well I squashed but in the process I managed to introduce conflicts!\nSorry.\nI'm going to cancel this pull request and retry fresh based on what I have learned!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDE3OTEwMjQwMA==", "comment_author": "vspinu", "comment_created_date": "2020-02-03T08:57:24Z", "comment_text": "Looks good. Thanks!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDE4NjExODYyNg==", "comment_author": "vspinu", "comment_created_date": "2020-02-19T08:40:30Z", "comment_text": "Thanks."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI3OTIxMjI5OQ==", "comment_author": "vspinu", "comment_created_date": "2020-02-12T11:32:37Z", "comment_text": "Thanks, I know about the typo. That training doc should be rewritten as per #516."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDI3OTIxMjYzMQ==", "comment_author": "setempler", "comment_created_date": "2020-02-12T11:39:05Z", "comment_text": "Thanks as well.\n#516 is one step further now ..."}], "stringr": [{"comment_id": "MDEyOklzc3VlQ29tbWVudDM3OTU3NTI=", "comment_author": "andrie", "comment_created_date": "2020-02-03T12:09:11Z", "comment_text": "Hadley\nI think I have figured out how to do a fetch and rebase, and have now done it.  Please can you try again?\nAndrie"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDc1OTM1ODE1", "comment_author": "gagolews", "comment_created_date": "2020-02-25T10:13:02Z", "comment_text": "@lmullen that's right."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDE3OTUxOTQ0OQ==", "comment_author": "ideamotor", "comment_created_date": "2020-02-03T23:00:44Z", "comment_text": "This function is terrific."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDM2MzIyNDU0Ng==", "comment_author": "smbache", "comment_created_date": "2020-02-05T21:18:46Z", "comment_text": "Looks good to me. Thanks!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQ1OTk5MTA1Nw==", "comment_author": "hadley", "comment_created_date": "2020-02-02T19:11:48Z", "comment_text": "I like it!\nIf I was to implement str_c() today, I'd definitely not include the collapse argument, saving that for a different function."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQ2NTAxODE5NQ==", "comment_author": "gagolews", "comment_created_date": "2020-02-19T07:31:57Z", "comment_text": "I'd be happy if stringi was mentioned too"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQ2NTEyMzgwMA==", "comment_author": "hadley", "comment_created_date": "2020-02-19T13:15:56Z", "comment_text": "@gagolews maybe that's a task for a separate vignette? I think a stringr vs stringi vignette would focus on how stringi is much finer grained that stringr, and has more features. I think it'd be hard to do that and compare stringr to base R in a single vignette."}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQ2NjE4ODczOA==", "comment_author": "hadley", "comment_created_date": "2020-02-21T22:14:43Z", "comment_text": "Thanks!"}, {"comment_id": "MDEyOklzc3VlQ29tbWVudDQ2NjE4ODczOA==", "comment_author": "TEST", "comment_created_date": "2020-02-23T22:14:43Z", "comment_text": "TEST!??!"}]}